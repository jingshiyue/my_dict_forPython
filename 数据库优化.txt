203.176.75.1

    
小的数据表不需要创建索引，直接查询更快，数据表大了肯定建议加索引，避免全盘扫描

提高数据库查询速度（自己总结的）：
    1、优化查询语句；
        a. 对于有null的列，不等于(!=)的查询，查询出的结果集不对
        b. 左模糊查询Like %XXX% 
            如：select account from member where nickname like ‘%XXX%’ 或者 select account from member where nickname like ‘%XXX’ 
            建议使用select account from member where nickname like ‘XXX%’，如果必须要用到做查询，需要评估对当前表全表扫描造成的后果； 刘加东@酷听说 
        c. 少使用or做为连接条件，or可能不会命中索引，导致全盘扫描，改成union
            如：select account from member where id = 1 or id = 2; 
            建议使用union all,改为 select account from member where id = 1 union all select account from member where id = 2; 
        d.负向比较（例如：!=）会引发全表扫描；
        e.少用in not in，连续字段用between，不连续少数字段用union
        f.少用count(*)查询
    2、建立合适的索引,避免全盘扫描；
        a.该列是否在应用为唯一索引，如果不为唯一索引，重复值的出现概率为多少，如果重复值出现多，是否可以与其他列一起组合成为联合索引而降低其重复率；
        b.多个单独应用可能建立了多个索引，对于较大表而言，索引的大小与索引的维护也会对数据库性能产生重大影响，此时应该考虑是否能够将应用合并或根据应用特点将索引合并；
        c.表的操作中在insert、update和delete等涉及数据变化的操作中，也会设计到索引的维护。对于表内无效数据定时移除并备份，无效或低效索引的删除也会提高相关SQL语句的性能。
        e.索引列不要有null，且避免在索引列上使用IS NULL和IS NOT NULL进行条件查询。
    3、减少表的数据量，分表或对表内无效数据定时移除备份。


优化数据库:
    设计表字段
        尽可能减少定义字段宽度，尽量把字段设置NOTNULL，，例如’省份’、’性别’最好适用ENUM尽可能减少定义字段宽度，尽量把字段设置NOTNULL，，例如’省份’、’性别’最好适用ENUM
    优化事务（减少事务持续时间）
        尽量避免在事务中进行读操作
        不要再事务过程中等待与用户的交互
        尽量使事务处理中修改的数据最少，减少锁定的行数，从而减少事务之间的资源争夺
    优化查询语句
    索引
    分表，外键连表
       
事务
    事务是多条sql语句结合，开启事务后，会话中的更新操作会持续占有排它锁，在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务，事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。
    
表级锁、行级锁、页面锁
    表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。
    行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。