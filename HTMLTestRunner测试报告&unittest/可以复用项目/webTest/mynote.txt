 def __init__(self):
        ft = open(configPath)
        data = ft.read()
        # remove BOM
        if data[:3] == codecs.BOM_UTF8:
            data = data[3:]
            f = codecs.open(configPath, 'w')
            f.write(data)
            f.close()
        ft.close()

        self.cf = configparser.ConfigParser()
        self.cf.read(configPath)
        
xlrd模块
unittest模块
sys.path.append("..") 加入父级目录

driver = Driver.get_browser()
driver.open_browser(name, site)

runner = HTMLTestRunner.HTMLTestRunner(stream=fb, title='WEB UI TEST',description='Test Description')
runner.run(suite)

封装：
    self.browser = webdriver.Chrome()
    self.browser.get(url)
    self.browser.quit()
    element.get_attribute('text')
    element.clear()



    
 def get_element(self):
        """
        get element
        :return: element
        """
        try:
            if self.pathType == 'ID':
                element = self.driver.find_element_by_id(self.pathValue)
                return element
            if self.pathType == 'XPATH':
                element = self.driver.find_elements_by_xpath(self.pathValue)
                return element
            if self.pathType == 'CLASSNAME':
                element = self.driver.find_element_by_class_name(self.pathValue)
                return element
            if self.pathType == 'NAME':
                element = self.driver.find_element_by_name(self.pathValue)
                return element
        except NoSuchElementException:
            return None
            
book = open_workbook(xls_path)
    # get sheet by name
sheet = book.sheet_by_name(sheet_name)
    # get nrows
nrows = sheet.nrows            
            

def get_xls(xls_name, sheet_name):
    """

    :param xls_name: excel file name
    :param sheet_name: sheet name
    :return: sheet value
    """
    web = runSet.get_web()
    site = runSet.get_site()
    cls = []
    # get excel file path
    xls_path = os.path.join(readConfig.proDir, 'file', web, site, xls_name)
    print("xls path:"+xls_path)

    # open excel file
    book = open_workbook(xls_path)
    # get sheet by name
    sheet = book.sheet_by_name(sheet_name)
    # get nrows
    nrows = sheet.nrows

    for i in range(nrows):
        if sheet.row_values(i)[0] != u'case_name':
            cls.append(sheet.row_values(i))
            # print(sheet.row_values(i))
    return cls

activity = {}


def set_xml():
    """
    get element
    :return:
    """
    web = runSet.get_web()
    site = runSet.get_site()
    if len(activity) == 0:
        file_path = os.path.join(readConfig.proDir, 'file', web, site, 'element.xml')
        tree = ElementTree.parse(file_path)
        for a in tree.findall('activity'):
            activity_name = a.get('name')

            element = {}
            for e in a.getchildren():
                element_name = e.get('id')

                element_child = {}
                for t in e.getchildren():
                    element_child[t.tag] = t.text
                element[element_name] = element_child
            activity[activity_name] = element


def get_el_dict(activity_name, element):
    """
    According to page, activity and element getting element
    :param activity_name: activity name
    :param element: element name
    :return:
    """
    set_xml()
    element_dict = activity.get(activity_name).get(element)
    print(element_dict)
    return element_dict
          
browser = webdriver.Chrome()
browser.maximize_window()            

每个test*.py 需要写if __name__ == "__main__":
    unittest.main()吗？？？
    经验证：不需要
    
每个testcase，开始寻找标签，操作完之后，最后要验证操作是否成功，一半可以验证页面上是否有哪个元素。
如：value = self.driver.find_elements_by_xpath('/html/body/div[1]/div[1]/div[4]/div/div/div/div[3]/div[1]/a/span')[0].get_attribute('text')
        self.assertEqual(value, 'Hi,1234 ')
        
        self.assertEqual(value, "Your Email Address Incorrect!")
        
   def check_result(self):
        """
        check result
        :return:
        """
        print("In check result!")
        if self.result == '0':
            value = Element("register", "register_ok").get_text_value()
            self.assertEqual(value, "Congratulations! You have successfully registered!")
        if self.result == '1':
            value = Element("register", "email_error").get_text_value()
            self.assertEqual(value, "Please check your email format.")
            
E:ERROR,该例子失败了，ok测试成功了。unittest.loader._FailedTest不是加载testcase失败的意思，是测试没有通过
ok testSearch (testbaidu.Login)
E  testLogin1 (unittest.loader._FailedTest)
E  testRegister1 (unittest.loader._FailedTest)

class Login(unittest.TestCase):
    #def __init__(self, methodName='runTest'):   #继承类的__init__函数不能乱写，容易覆盖父类__init__方法，会报错
        #self.case_name = "baidu_search"
        pass
        
driver.maximize_window()

用html生成报告，会将tesecase中的log保存在log文件中，

driver.save_screenshot(os.path.join(conf.failImagePath, filename))

assertIn('main', currUrl, 'main not in current url!')

driver.excute_script(src)

element = self.findElement(*self.loginBtnEle)
empty = self.findElement(*element)
 
登录失败时弹出的alert
    alert = self.driver.switch_to_alert()
    text = alert.text
    alert.accept()
    
WebDriverWait(self.driver,10).until(EC.visibility_of_element_located(loc))    

sys._getframe().f_code.co_name

子类继承父类，父类中又引用了个外部类，子类也将拥有这个外部类的所有属性


def quit(self):
    self.findElement(*self.quitBtn).click()   #  *表示多个参数
    log.logger.info('quit')