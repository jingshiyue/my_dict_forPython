----------------------------------python 内置函数---------------------------------------------------------------------------------------------
一、查看官方文档
1.学习一个新的模块，其实不用去百度什么的，直接用help函数就能查看相关注释和案例内容。
    >>import requests
    >>help(requests)


ord()函数是chr()函数（对于8位的ASCII字符串）或unichr()函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的ASCII数值，或者Unicode数值
list1 : [1,2,3,4,5]
list1.reverse()    #将list1 反序

print 2<<3 ---->2*2的3次方:16
print 8>>3 ---->8/2的3次方:1
在数学没有溢出的前提下，对于正数和负数，左移以为都相当于乘以2的1次方，左移n位就相当于乘以2的n次方，右移一位相当于除以2，右移n位相当于除以2的n次方

# -*- coding:utf-8 -*- 
def Unicode2HexStr(Unicde_Str):   
    Hex_Str : ""   
    for i in range(0, len(Unicde_Str)):   
        Hex_Str += (hex(ord(Unicde_Str[i])).zfill(4))   
    return Hex_Str   
U_Str : u'2014number中英文数字文转' 
print(Unicode2HexStr(U_Str))

str1 : "A"。0
20print str1.zfill(4)
print "11111111111111111111111111"
str_uhex='0032003000310034006e0075006d0062006500724e2d82f1658765705b5765878f6c' 

def HexStr2Unicode(Hex_Str):   
    Unicde_Str : ""   
    for i in range(0,len(Hex_Str)//4):   
        unichr(int(Hex_Str[i*4:i*4+4], 16))   
        Unicde_Str += unichr(int(Hex_Str[i*4:i*4+4], 16))   
    return Unicde_Str   

print(HexStr2Unicode(str_uhex)) 
min(remain_cnt, step)
deepcopy
cop1 : copy.copy(origin)
cop2 : copy.deepcopy(origin)
repr(object)
conent_list.index(find_index)

cmd_str : "pkt : pkt_3762_%02x%02d()" % (self.afn, self.fn)
exec(cmd_str)

exit() 
    内置函数；放在子线程中，退出子线程，但不会导致主线程退出；放在主线程中，退出主线程，同时子线程（子线程为守护线程【setDaemon(True)】）也退出，（子线程从属于主线程？子线程的存在不依赖主线程，可以单独存在，即在主线程被关掉后，子线程继续存活）子线程不为守护线程时，只退出主线程，子线程不会被终止。
    一般用在主线程
    
os._exit(0) 
    放在子线程中，退出子线程【不论子线程是否为守护线程】，同时会导致主线程退出；放在主线程中，退出主线程，不论子线程是否为守护线程，都会关闭子线程；
    会关掉相关的进程

str.lower() 转换字符串中所有大写字符为小写。
cmp(x,y) 函数用于比较2个对象，如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。
random.sample(all_addr_list, 1)
str.ljust(width[, fillchar])  #width -- 指定字符串长度。fillchar -- 填充字符，默认为空格。 返回值 返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。

eval:   eval(expression[, globals[, locals]])
for i in range(iic_count):
    tag : "iic%d_meter_list" %(i+1)            
    iic_addr_list : eval(tag)    #参数 字符串
    
    

random : [5, 9, 'cat']
# converting list to iterator
randomIterator : iter(random)  #转成可迭代对象
print(randomIterator)

# Output: 5
print(next(randomIterator))
# Output: 9
print(next(randomIterator))
# Output: 'cat'
print(next(randomIterator))
# This will raise Error
# iterator is exhausted
print(next(randomIterator))    #next最后一个会报错

print(django.__path__)  #可以用于查找包路径

os.path.abspath(__file__)   #文件所在的绝对路径
os.path.dirname(os.path.abspath(__file__)) #文件所在的绝对路径的上一级目录

 __call__    说明：类的特殊成员方法，象后面加括号，触发执行
 
os.path.split('PATH')
    1.PATH指一个文件的全路径作为参数：
    2.如果给出的是一个目录和文件名，则输出路径和文件名
    3.如果给出的是一个目录名，则输出路径和为空文件名
	
---------获取函数的参数信息--------------
logger.debug(self.ap.api_face_security_face_check.__defaults__)         #参数默认值
logger.debug(self.ap.api_face_security_face_check.__code__.co_argcount) #参数个数
logger.debug(self.ap.api_face_security_face_check.__code__.co_varnames)	#参数的名字
#打印函数参数，以字典形式
	res = self.ap.api_face_security_face_check(**kwargs)
	res.__dict__   

-------------------------------------    
import codecs
 def __init__(self):
        ft : open(configPath)
        data : ft.read()
        print(data) 
        print(codecs.BOM_UTF8)  #读取文件头，判断是否是bom 格式文件
        # remove BOM
        if data[:3] == codecs.BOM_UTF8:
            data : data[3:]
            f : codecs.open(configPath, 'w')
            f.write(data)
            f.close()
        ft.close()
------------------------
print u'查看modk库常用的方法：',dir(mock)
print u'查看mock库详细的帮助信息:',type(help(mock))    
 
-------------------------------------------------------------------------------------------------------------------------------
from . import echo
在当前文件夹effects里的__init__.py程序中导入echo子模块。 

from .. import formats
在上一级文件夹sound里的__init__.py程序中导入formats。 

from ..filters import equalizer
在上一级文件夹sound下的filters文件夹里的__init__.py程序中导入equalizer子模块。
---------------------------------工作路径----------------------------------------------------------------------------------------------
cwd : os.getcwd()
C:\Users\Mir-Z\Desktop\my\my_interface_test>python3 run_test.py
C:\Users\Mir-Z\Desktop\my\my_interface_test    #cwd为该路径

C:\Users\Mir-Z\Desktop>python3 C:\Users\Mir-Z\Desktop\my\my_interface_test\run_test.py
C:\Users\Mir-Z\Desktop   #cwd为该路径

-------------------------------------------------------------------------------------------------------------------------------
-----------------------------------占位符-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

print '------%s---------%d--------%s-------' % ('ME',5,u'岁了')
tpl : "i am %(name)s age %(age)d" % {"name": "alex", "age": 18}
'---字符串---{ }---字符串---{ }---字符串---{ }'.format(x1,x2,x3) #{ }中填x1,x2,x3 ，每个{ }是一个整体，{ }中自己定义。比上面的好用

In [3]: '{1},{0},{1}'.format('kzc',18) 
Out[3]: '18,kzc,18'

hash : {'name':'hoho','age':18}
'my name is {name},age is {age}'.format(**hash)
'my name is hoho,age is 18'
-----------------------format---------------------------------------------------------------------------------------------------------------------
******format转换进制（将十进制转换成其他进制）*********
In [54]: '{:b}'.format(17)   #十进制的17转换成二进制，是10001
Out[54]: '10001'
In [55]: '{:d}'.format(17)   
Out[55]: '17'
In [56]: '{:o}'.format(17)   #17转换成八进制，是21
Out[56]: '21'
In [57]: '{:x}'.format(17)   #17转换成十六进制，是11
Out[57]: '11'
**********************************************************************
******format转换进制（浮点数精度）*********
In [44]: '{:.2f}'.format(321.33345)
Out[44]: '321.33'
**********************************************************************


******format对齐*********
^、<、>分别是居中、左对齐、右对齐，后面带宽度，chr(12288)表示中文空格
:号后面带填充的字符，只能是一个字符，不指定的话默认是用西文空格填充

In [17]: '{:a>8}'.format('189')  #右对齐，189前面补充a， 对齐8位
Out[17]: 'aaaaa189'
**中文对齐**
ulist : []
ulist.append([1,"清华大学","10"])
ulist.append([2,"中国科学技术大学","10"])
ulist.append([3,"复旦大学","10"])
for ul in ulist:
    print("{:^6}\t{:^20}\t{:^6}".format(ul[0],ul[1],ul[2]))  #{：^6}表示居中显示，占6个字符宽度 
	
for ul in ulist:
    print ("{0:^6}\t{1:{3}^10}\t{2:^6}".format(ul[0],ul[1],ul[2],chr(12288)))	#python2.7不支持chr(12288)，会报错。 在python3里可以这样用，{1:{3}^10} 1表示序号，不写就按照0，1，2……排列。{3}表示用chr(12288)填充，不写{3}的话默认就是西文空格。\t 横向制表符隔开。
	
**********************************************************************
-----------------各种进制间的转化---------------------------------------------------------------------------------------------------------------------------
int("A",16)  #，将字符串A转换成16进制。输出10


b：二进制，o：八进制，d：十进制，x：十六进制 
bin()、oct()、hex()返回值均为字符串，且分别带有0b、0o、0x前缀。 

***
>>> bin(10) #十进制转二进制
0b1010
>>> oct(12) #十进制转八进制
014
>>> hex(12) #十进制转十六进制
0xc
***

**用format转化**
>>> '{0:b}'.format(10)    #十进制转二进制
'1010'                    
>>> '{0:o}'.format(12)    #十进制转八进制
'14'                      
>>> '{0:x}'.format(12)    #十进制转十六进制
'c'
***


***二进制转十进制 int函数*** 
int(string_num, n)： string_num：进制的字符串表示   n：表示string_num是多少进制的数 
>>> int('1010',2)
10
>>> int('014',8)
12
>>> int('0xc',16)
12
***

进行协议解析时，总是会遇到各种各样的数据转换的问题，从二进制到十进制，从字节串到整数等等，废话不多上，直接上例子

整数之间的进制转换:
10进制转16进制: hex(16) ==> 0x10 16进制转10进制: int('0x10', 16) ==> 16 类似的还有oct()， bin()
-------------------

字符串转整数:
10进制字符串: int('10') ==> 10 16进制字符串: int('10', 16) ==> 16 16进制字符串: int('0x10', 16) ==> 16 
-------------------
字节串转整数:
转义为short型整数: struct.unpack(' (1, 0)转义为long型整数: struct.unpack(' (1,) 
-------------------
整数转字节串:
转为两个字节: struct.pack(' b'\x01\x00\x02\x00'转为四个字节: struct.pack(' b'\x01\x00\x00\x00\x02\x00\x00\x00' 
-------------------
字符串转字节串:
字符串编码为字节码: '12abc'.encode('ascii') ==> b'12abc'数字或字符数组: bytes([1,2, ord('1'),ord('2')]) ==> b'\x01\x0212'16进制字符串: bytes().fromhex('010210') ==> b'\x01\x02\x10'16进制字符串: bytes(map(ord, '\x01\x02\x31\x32')) ==> b'\x01\x0212'16进制数组: bytes([0x01,0x02,0x31,0x32]) ==> b'\x01\x0212' 
-------------------
字节串转字符串:
字节码解码为字符串: bytes(b'\x31\x32\x61\x62').decode('ascii') ==> 12ab 字节串转16进制表示,夹带ascii: str(bytes(b'\x01\x0212'))[2:-1] ==> \x01\x0212字节串转16进制表示,固定两个字符表示: str(binascii.b2a_hex(b'\x01\x0212'))[2:-1] ==> 01023132字节串转16进制数组: [hex(x) for x in bytes(b'\x01\x0212')] ==> ['0x1', '0x2', '0x31', '0x32'] 

----------------------------------------时间---------------------------------------------------------------------------------------------------------------------------------------------------------------------
当地时间：

c : time.strftime('%Y-%m-%d %H:%M:%S',time.localtime())   #将本地时间格式化,返回str类型
past_time : time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(time.time()-100000))
----------------------------------------------------------------------------------------------------------------------------------------
import time
时间戳：（先转成时间数组，在转时间戳）
a : "2011-09-28 10:00:00"
time.strptime(a,'%Y-%m-%d %H:%M:%S')
b : time.mktime(time.strptime(a,'%Y-%m-%d %H:%M:%S'))
print b


s
log_file_name : '.\cctt_simulator_%s.log'%(now_time)
-----------------------------------------------------------------------------------------------------------------------------------------
import datetime
line : str(datetime.datetime.now())[:-3] + '| ' + line   # 打印格式： 时间戳stamp＋ｌｉｎｅ（内容）
datetime.datetime.now()
random.seed(datetime.datetime.now())
（1）time与datetime
　　a、时间戳
　　b、格式化的时间字符串
　　c、元组（struct_time）共九个元素
方法：time.time()时间戳 
　　time.clock
　　time.sleep()　睡几秒
　　time.gmtime()转换成元组（格林威治时区）
　　time.localtime()转成元组（本机时区）
　　time.mktime()元组转换成时间戳
　　time.strftime()元组转换成字
　　time.strptime()字符串转成元组（注意一一对应关系）
　　asctime()元组转成字符串（特定格式）
　　ctime()时间戳转成字符串（特定格式同上）
--------------------------------相对路径----绝对路径------------------------------------------------------------------------------------------------------------------------
.. 相对路径 父目录
cd  进入（change direction）
c: 进入跟目录
fileName :fileDirec.replace("\\", "/")
fileDirec : direc + '\\' + file_name
s_path : 'D:/blog/'
if not os.path.isdir(s_path):

.\   表示项目文件所在目录之下的目录。
..\ 表示项目文件所在目录向上一级目录下的目录。
..\..\表示项目文件所在目录向上二级目录之下的目录。

for i in range(9):
    now_time : time.strftime("%Y%m%d%H%M%S", time.localtime())
    time.sleep(1)
    log_file_name : './cctt_simulator_%s.log'%(now_time)   #都能表示相对路径,针对windows 平台
    #log_file_name : '.\cctt_simulator_%s.log'%(now_time)  #都能表示相对路径，针对windows 平台
    f : open(log_file_name,"w")
    f.close()



#############################
import fileinput
file : open(r"./record/name.txt")  #相对路径用/。  （当运行文件和读取的文件在同级目录下，可以不用相对路径，直接加文件名即可）
content : file.readlines()
print "content:"
for line in content:
	print line

print "fileinput"
for line in fileinput.FileInput(r"C:\Users\Mir-Z\Desktop\hava_a_try\record\name.txt"): #绝对路径用\
	print line

输出：
content:
aaaaaaaaaaaaa
fileinput
aaaaaaaaaaaaa
#############################

---------------------------------------------------------------------------------------------------------------------------------------------------
if country is None:
等价于： if not country:
if country is not None:
----------
截取正则表达式后面的字符（[1]）：
 if re.search(r'68 [0-9][0-9] [0-9][0-9] [0-9][0-9] [0-9][0-9] [0-9][0-9] [0-9][0-9] 68 11',line):
              matchObj : re.search(r'68 [0-9][0-9] [0-9][0-9] [0-9][0-9] [0-9][0-9] [0-9][0-9] [0-9][0-9] 68 11',line).group()                          
               line.split(matchObj)[1][3:15]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#!/usr/bin/python相当于写死了python路径;
#!/usr/bin/env python会去环境设置寻找python目录,推荐这种写法
--------------------------------python2python3编码-------------------------------------------------------------------------------------------------------------------
python2 默认ascii编码，python3默认utf-8编码。所以python3不用每个文件头加# -*- coding:utf-8 -*- 
---------------------------------------------------------------------------------------------------------------------------------------------------
原生字符串 与 文件夹路径
root : "d:\\pic\\"       不用原生字符串时，字符串中每个字符前都要加\
root : r"d:\pic1\\"     \\" 不能写成\"，输出:d:\pic1\\
root1 : r"d:\pic1" + "\\"
root3 : "d:\pic1\\"
root1、root3输出：d:\pic1\
fN3~fyqvwx
fN3~fyqvwx
--
mkdir 用于创建文件夹，而不是文件。创建文件用open(),写入内容来创建文件
root : r"d:\pic1\\"
path : root + url1.split(r'/')[-1]

if not os.path.exists(root):
     os.mkdir(root)
if not os.path.exists(path): 
    with open(path,"wb+") as f:
    f.write(r.content)   #file.writelines(data + '\n')
    print("保存成功")

-----调试技巧-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
raise 关键字；对Exception函数的调用
raise Exception('This is the error message.')
if len(symbol) != 1:
 raise Exception('Symbol must be a single character string.')  #raise抛出错误
def boxPrint(symbol, width, height):
    if len(symbol) != 1:
        raise Exception('Symbol must be a single character string.')
    if width <= 2:
        raise Exception('Width must be greater than 2.')
    if height <= 2:
        raise Exception('Height must be greater than 2.')
    print(symbol * width)
    for i in range(height - 2):
        print(symbol + (' ' * (width - 2)) + symbol)
    print(symbol * width)
        
for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):
    try:
        boxPrint(sym, w, h)
    except Exception as err:     #err 代表上述raise抛出的错误
        print('An exception happened: ' + str(err))

if not os.path.exists(self.conf_path):
    raise FileNotFoundError("请确保配置文件存在！")
========
一个例子：
try:
    #exec(cmd_str)
    pkt.from_data(int_list)
    pkt.prefix : self.prefix
    pkt.len : self.len
    pkt.ctrl : self.ctrl
    pkt.res : self.res
except Exception, e:
    print str(e)   #打印错误信息
=========
assert 1==2,print("failed")  #assert 断言为假，则输出后面的。assert是python3的。assert产生则程序终止，后面的程序不执行
assert，try ...except 区别：assert产生错误，程序会终止，try...except不会终止，程序会跳过try中的代码块，继续运行。assert是针对程序员，断言是针对开发的，不是针
对最终产品 
，try...except针对用户
断点不要设置在for while这样的循环上，因为F8执行到下一个断点，进行下一次循环。相当于此处打了多个断点
调用栈 包括在 反向跟踪（traceback） 中，调用栈，函数调用关系：从上到下，从下往上，函数被调用。程序最终出错在调用栈的最下面。
反向跟踪写入文件：errorFile.write(traceback.format_exc())

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

os模块中的system()函数可以方便地运行其他程序或者脚本。其函数原型如下所示。
os.system(command)
command  要执行的命令，相当于在Windows的cmd窗口中输入的命令。如果要向程序或者脚本传递参数，可以使用空格分隔程序及多个参数。
# 使用os.system()函数打开记事本程序
>>> os.system('notepad')
0 # 关闭记事本后的返回值
# 向记事本传递参数，打开python.txt文件
>>> os.system('notepad python.txt')
os.system(sys.argv[1]) 
os.system("cd E:/codeTest/test/2/ & start /MIN E:/codeTest/test/2/2.exe & cd .. ")   & 作用，连续执行cmd
os.system('taskkill /f /fi "IMAGENAME eq 1_cco.exe"')   taskkill 关闭程序
import sys
sys.argv[1]表示cmd接收的第一个参数。 比如输入notepad，则打开记事本   
----------------正则表达式--------------------------------------------------------------------------------------------------------------
ref : re.compile(r"\A2323(.+)4040\Z")   #开头结尾，不能加括号括住

rst : re.search(r'[1-9]\d{5}','BIT 100081') #筛选邮编地址
等价于：
pat : re.compile(r'[1-9]\d{5}') 
rst : pat.search('BIT 100081')
########
searchEXCE : re.compile(r"exception",re.I) #大小写不敏感
while(conent):
    if searchEXCE.search(conent):
        print searchEXCE.search(conent).group()
    conent = f.readline()
########
---正则查找关键字之前或者之后的字符串-----------------------------------------------------------------------------------------------------
searchObj : re.search( r'(.*) are (.*), line, re.M|re.I)
searchObj.group(1)
searchObj.group(2)
**********************************************
line : "www.baidu.com"
find_list : re.findall(r"(.*?).baidu.(.*)",line)
print find_list[0][0]
print find_list[0][1]
print type(find_list)
print find_list

输出：
www
com
<type 'list'>
[('www', 'com')]

----
keyWord1 : 'Asserted'
re1 : re.compile('(.*?)'+keyWord1)  # 注意不能写成 re1 : re.compile('(.*?)keyWord1'),keyWord1将不是变量，而是字符串
if re1.search(line):
	todo
-----

********************************************
import re
a : "123abc456"
print re.search("([0-9]*)([a-z]*)([0-9]*)",a).group(0)   #123abc456,返回整体
print re.search("([0-9]*)([a-z]*)([0-9]*)",a).group(1)   #123
print re.search("([0-9]*)([a-z]*)([0-9]*)",a).group(2)   #abc
print re.search("([0-9]*)([a-z]*)([0-9]*)",a).group(3)   #456
group() 同group（0）就是匹配正则表达式整体结果。group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分，group(3) 列出第三个括号匹配部分。当然郑则表达式中没有括号，group(1)肯定不对了。
********************************************
import re

line : "Cats and mouse are smarter than dogs";

searchObj : re.search( r'(.*) are (.*?) .*', line, re.M|re.I)   #(.*)：贪婪匹配   (.*?)：非贪婪匹配，注意 are 前后都有个空格，一般都是两边用关键字夹住，也可以用空格夹住。如：reg : re.compile( 'Msg(.*?) Asserted')
 
if searchObj:
   print "searchObj.group() : ", searchObj.group()
   print "searchObj.group(1) : ", searchObj.group(1)
   print "searchObj.group(2) : ", searchObj.group(2)
else:
   print "Nothing found!!"
   
执行结果如下：
searchObj.group() :  Cats are smarter than dogs
searchObj.group(1) :   Cats and mouse
searchObj.group(2) :  smarter

matchObj : re.match( 'are (.*?) ', line, re.M|re.I)
print "matchObj.group(1) : ",  matchObj.group() #会报错， 没有分组时，可以.group(),group()表示的是整体，但不能group(1)。group() 同group（0）就是匹配正则表达式整体结果

首先，这是一个字符串，前面的一个 r 表示字符串为非转义的原始字符串，让编译器忽略反斜杠，也就是忽略转义字符。但是这个字符串里没有反斜杠，所以这个 r 可有可无。 
(.*) 第一个匹配分组，.* 代表匹配除换行符之外的所有字符。 
(.*?) 第二个匹配分组，.*? 后面多个问号，代表非贪婪模式，也就是说只匹配符合条件的最少字符 
后面的一个 .* 没有括号包围，所以不是分组，匹配效果和第一个一样，但是不计入匹配结果中。 
matchObj.group() 等同于 matchObj.group(0)，表示匹配到的完整文本字符 
matchObj.group(1) 得到第一组匹配结果，也就是(.*)匹配到的 
matchObj.group(2) 得到第二组匹配结果，也就是(.*?)匹配到的 
因为只有匹配结果中只有两组，所以如果填 3 时会报错。

.group的编号：
编号为0的group，始终代表匹配的整个字符串；
你在正则表达式内所看到的，通过括号括起来的group，编号分别对应着1,2,3，…

----------

----------文件读写权限-------二进制文件---------------------------------------------------------------------------------------------------------
+ 读写模式
b 二进制模式
a 追加模式   add：追加
r 只读模式
w 只写模式
没有rw， 是r+ 或者w+
详细如下：
******************************
复制文件不需要加权限，默认的读就可以

r 以只读方式打开文件。这是默认模式。
rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
r+ 打开一个文件用于读写。
rb+ 以二进制格式打开一个文件用于读写。
w 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
ab 以二进制格式打开一个文件用于追加。
a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。
**********r与rb区别********************
读文件 进行读文件操作时，直到读到文档结束符（EOF）才算读取到文件最后，Python会认为字节\x1A(26)转换成的字符为文档结束符（EOF），
      故使用'r'进行读取二进制文件时，可能会出现文档读取不全的现象。
示例：
     二进制文件中存在如下从低位向高位排列的数据：7F 32 1A 2F 3D 2C 12 2E 76
     如果使用'r'进行读取，则读到第三个字节，即认为文件结束。
     如果使用'rb'按照二进制位进行读取的，不会将读取的字节转换成字符，从而避免了上面的错误。
解决方案：
     二进制文件就用二进制方法读取'rb'
--------------------  二进制文件--优势--------------------  
第一是二进制文件比较节约空间，这两者储存字符型数据时并没有差别。
但是在储存数字，特别是实型数字时，二进制更节省空间
一般认为，文本文件编码基于字符定长，译码容易；二进制文件编码是变长的，所以它灵活，存储利用率要高些，译码难一些
二进制文件就是把内存中的数据按其在内存中存储的形式原样输出到磁盘中存放，即存放的是数据的原形式。

------------------------------------------------------------  

-----文件读写---------------------------------------------------------------------------------------------------
while 1:
    lines : per_file_content.readlines()
    if not lines:
        per_file_content.close()
        break
    for line in lines:
		TODO	


----if else------------------------------------------------------------------------------------------------------------------

if elif else这是一个判断的三个分支
if ｜if else  是两个判断
********************************
for i in range(1,9):
    if i ==2:
        print i
        break
    for j in range(1,9):
        if j ==3:
            print i,j
            break
print '----------'
for q in range(1,9):
    print q,
	
***
输出：        #break跳出上一层循环，此处跳出第一个for 循环。 如果有与第一个for 循环并列的for循环，则执行并列的for 循环
	 1 3
     2
     ----------
     1 2 3 4 5 6 7 8 
	
*******************************

---elipse调试---------------------------------------------------------------------------------------------------------
断点调试中，光标所在的位置没当前程序即将运行的位置。
F5 进入内部的单步调试
F6 不进入内部的单步调试
F11 运行

breakpoint的调试（条件断点调试）
断点可以打在for下面的任何地方。



-----range---------------------------------------------------------------------------------------------------
for num in [1,2,3,4,5,6,7,8,9]:
等价于：
for num in range(1,10):

----------coding utf-8----------------------------------------------------------------------------------------------
coding:[编码]或者coding=[编码]才行，这个应该可以视作为标准的声明方式吧。 
但是为什么通常这种方式呢？
# -*- coding:utf-8 -*-  

--------try except-----------------------------------------------------------------------------------------------------------------------
***
try:
    fh : open("testfile", "w")
    fh.write("这是一个测试文件，用于测试异常!!")
except IOError:
    print "Error: 没有找到文件或读取文件失败"
else:
    print "内容写入文件成功"
    fh.close()
***

***
try:
    正常的操作
   ......................
except:
    发生异常，执行这块代码
   ......................
else:
    如果没有异常执行这块代码
***
以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。 	

try:
<语句>
finally:
<语句>    #退出try时总会执行
raise


try except的调试，不能追踪问题，把try去掉，再调试
-------------set------------------------------------------------------------------------------------------------------------------
定义空set： set_a : set()
添加     ： set_a.add()

---------------------configParser----------------------------------------------------------------------------------------------------------
import ConfigParser     #要求文件中所有的内容都是按sections和items的方式组织的
config = ConfigParser.ConfigParser()
config.read("C:\Automation\Scripts\META_INF\TestbedConfig.ini")
meter_address_path = config.get("config","meter_addr_path")
config.get(secion_name, item_name)
if(config.has_section(secion_name) == False):
    config.add_section(secion_name)
config.set(secion_name,item_name,value)
config.write(config_file)
config.options(secion_name)

#############
自己写的例子：
config.ini文件 内容如下：
[sect_a]   #section(区域)
name : zcl   #item（项目）
age : 18
-----
import ConfigParser
config : ConfigParser.ConfigParser()
config.read(r"./config.ini")
print config.get("sect_a","name")
print config.get("sect_a","age")

输出：
zcl
18
#############
------------------------------conf文件操作---------------------------------------------------------------
读取conf文件：

    # -*- coding:utf-8 -*- 
    import configparser
    cf : configparser.ConfigParser()
    #读
    cf.read("test.conf")
    #获取所有的sections
    sections : cf.sections()
    print(sections)
    #获取某个section下的所有options
    options : cf.options("db")
    print(options)
    #获取某个section下的所有items
    items : cf.items("db")
    print(items)
    host_value : cf.get("db", "db_host") #返回str类型
    print(host_value)
    port_value : cf.getint("db", "db_port") #返回int类型，类似有：getfloat(), getboolean()
    print(port_value)
    #修改
    cf.set("db", "db_password", '123456')
    #删除
    cf.remove_option("handle", "thread")
    cf.remove_section("handle")
    #将改变写入文件
    cf.write(open("test.conf", "a"))
    #写
    #添加一个section
    cf.add_section("test")
    #添加section下的item
    cf.set("test", "count", '1')
    #写入文件
    cf.write(open("test1.conf", "a"))

    ##print 结果
    #['db', 'handle']
    #['db_host', 'db_port', 'db_user', 'db_password']
    #[('db_host', '127.0.0.1'), ('db_port', '3306'), ('db_user', 'root'), ('db_password', 'xyz123456')]

    #打开文件，结果已经写入文件中了

------------------------长字符串换行-------------------------------------------------------------------------------------------------------
line : 'ssssssssssssssssssssssssssss\      
sssssssssssssssssssssssssssssssssssssss'    
#第一行的字符串末尾加“ \ ” ， 第二行的字符串顶格写
print line
输出：sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss

print str(datetime.datetime.now())[:-3] + \
      " Sent   :" + sd_datagram
----------------------api帮助-----------help(string.join)----------------------------------------------------------------------------------------------
Microsoft Windows [版本 10.0.14393]
(c) 2016 Microsoft Corporation。保留所有权利。

C:\Users\Mir-Z>python
Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import string
>>> help(string.join)
Help on function join in module string:

join(words, sep=' ')
    join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

li : ["68"] 
lis : ["16"]
lists : li + lis
print lists

lists_str : "".join(lists) #list转换成str
print lists_str
输出：
['68', '16']
6816



------------------判断文件是否存在-------------------------------------------------------------------------------------------------------------
def del_exists_file(file_name):
    if os.path.exists(file_name):
        os.remove(file_name)
    return True

--------------------------打开 关闭-----------------------------------------------------------------------------------------------------
os.system("cd E:/codeTest/test/1_cco/ & start /MIN E:/codeTest/test/1_cco/1_cco.exe & cd .. ")
os.system('taskkill /f /fi "IMAGENAME eq 1_cco.exe"')

---------------------路径和文件 相关问题----------------------------------------------------------------------------------------------------------
    log_path : r".\flash_log"
    if not os.path.exists(log_path):
        os.mkdir(log_path)
    log_file : log_path + "\\" + r"flash_log.log" 
	
	if os.path.exists(log_file):
        os.remove(log_file)


-------------------cmd 接受（系统）参数------------------------------------------------------------------------------------------------------------
if len(sys.argv) <= 1 or len(sys.argv) > 4:      #参数长度
    print "usage:\n\tuart_port_read_log.py com1 [file_name_tag] [folder_name]"     #\n:换行   \t：制表符
    print "\tcom1:            the uart port to read log"   \t: 指标表
    exit()  #退出.py文件，cmd窗口回到 进入文件夹命令
	
	    if len(sys.argv) >= 3:
        file_name_tag : sys.argv[2]
---串口读取数据-----recvd_buff : data_que.get(block : True, timeout : wait_timeout)-----------------------------------------------------------------------------------------------
思路:serial--->ser.readline()[串口中的数据读取]--->Queue.put（）[放入到FIFO中]--->
     Queue.get()[从FIFO中取出]--->open("xx",ab+)[ab+模式打开文件，同时需要导入binasci包，例如file : open(file_path, "ab+")]
	 --->File.write()[例如：file.write(line + "\n")]
	 
一个例子：
    while 1:
        serp.write(send_str)
        time.sleep(0.1)
        s_info += serp.read(1)
        bytes2read : serp.inWaiting()
        tmp : serp.read(bytes2read)
---------
自己修改版：
def capture_log(ser):
    queue_log : Queue.Queue(5000)   
    while 1:
        line : ser.readline()
        if len(line) ==0:
            continue
#        print "line- ", line
        queue_log.put(line)
        print queue_log.get().strip()

myqueue = Queue.Queue(maxsize : 10)
q_info = Queue.Queue(maxsize : -1)
Queue.Queue类即是一个队列的同步实现。队列长度可为无限或者有限。可通过Queue的构造函数的可选参数maxsize来设定队列长度。如果maxsize小于1就表示队列长度无限。
---------
************************
循环读取串口ser.readline()，串口的内容放入到FIFO中。通过FIFO循环put，get。将get到的内容循环写入到文本。
    while True:
		ser.readline()
		queue.put()
		queue.get()
		write到文本
************************

def open_uart(port, rate):
    try:
        ser = serial.Serial(
            port:port,
            baudrate:rate,   #baudrate：波特率， rate：速率
            parity:serial.PARITY_NONE,  #检验位为空
            stopbits:serial.STOPBITS_ONE,  #停止位
            #bytesize:serial.SEVENBITS
            bytesize:serial.EIGHTBITS,    
            timeout:0.1
        )
    except:
        print "failed to open uart %s" % port
        return None   #出错了，遇到第一个return ，不执行后面的了
    print "open uart [%s] at baudrate [%d] OK." % (port, rate)
    return ser
--------串口读取数据------------------
def process_log(log_queue, file_path):
    while True:
        line :log_queue.get()
        file : open(file_path, "ab+")
        file.write(line + "\n")   #file.writelines(data + '\n')
        file.close()
        print line.strip()

def capture(ser, file_path):   #catch log
    logQueue : Queue.Queue(5000)   #设置Queue 容量
    threading.Thread(target : process_log, args : [logQueue, file_path]).start()
    while True:
        line : ser.readline()  #串口读取数据
        line : line.strip()
        if len(line) == 0:
            continue

        line : str(datetime.datetime.now())[:-3] + '| ' + line
        logQueue.put(line)  #将从串口读取的数据放入到FIFO中， put，get 函数，

------------------文件夹的创建-------------------------------------------------------------------------------------------------------------
    if len(sys.argv) >= 3:
        file_name_tag : sys.argv[2]
    if len(sys.argv) >= 4:
        folder_name : sys.argv[3]

    if folder_name == '':
        folder_name : '.\\'
    else:
        folder_name : '.\\' + folder_name
        if folder_name.endswith('\\') == False:
            folder_name += "\\"
     # create target folder
    if os.path.exists(folder_name) == False:
        os.mkdir(folder_name)

-------------设置窗口标题------------------------------------------------------------------------------------------------------------------
    # set window title
    例如：os.system("title " + port + ' - ' + file_name_tag)
	
	例如：os.system("title 我是人")
import os
os.system("title " + "CCO" + ' - ' + "WATERT")    #title，设置标题 。 title 为关键字
raw_input("Press <Enter> to Exit...")     #按enter 退出
###中文版###
print u"按" + " <Enter> " + u"退出" + "..."
raw_input()

-------------------------------------------------------------------------------------------------------------------------------
def main():
	port, rate, file_path : init()
	ser : open_uart(port, rate)
	if ser != None:
		capture(ser, file_path)

if __name__ == '__main__':
    main()


------------------ｑｕｅｕｅ　队列-------------------------------------------------------------------------------------------------------------
logQueue : Queue.Queue(5000)　　　＃ＦＩＦＯ　队列（单向队列）　先进先出
line :log_queue.get()
logQueue.put(line)
----------
FIFO 放满后，后面的数据会进入等待？导致后续代码不执行？
q : queue.Queue(1) #指定队列大小
q.put('a')
print(q.full())

#输出：True
----------
q : queue.Queue()
q.put('a')　　　＃put（放一个元素进队列） get（从队列中取出一个元素） 先进先出原则
q.put('b')
print(q.get())
put()
get()
put_nowait()
get_nowait() 无阻塞的向队列中get任务，当队列为空时，不等待，而是直接抛出empty异常
queue.join() 阻塞等待队列中任务全部处理完毕，需要配合queue.task_done使用
Queue.join() 实际上意味着等到队列为空，再执行别的操作
Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号
Python的Queue模块中提供了同步的、线程安全的队列类

ta : threading.Thread(target:testa)
tb : threading.Thread(target:testb)
for t in [ta,tb]:
    t.start()
for t in [ta,tb]:
    t.join()
print "DONE"

--------------------线程　　thread---------------------------------------------------------------------------------------------------
getName(): 返回线程名。
setName(): 设置线程名。
%%%%%%
queueLock : threading.Lock()
queueLock.acquire()
queueLock.release()
%%%%%%
import threading
process_log(log_queue, file_path)
threading.Thread(target : process_log, args : [logQueue, file_path]).start()　　＃logQueue, file_path，是process_log函数的参数

Python 通过threading.Event()产生一个event对象，event对象维护一个内部标志（标志初始值为False），通过set()将其置为True，wait(timeout)则用于阻塞线程直至Flag被set（或者超时，可选的），启动线程，线程会阻塞在event.wait()那里，直到对应事件调用event.set() 。isSet()用于查询标志位是否为True，Clear()则用于清除标志位（使之为False）

import threading

print_event : threading.Event()
print_event1 : threading.Event()

print "1"
print_event.set()     #set()和wait()要配套才能解锁wait().如果是print_event1.set()，就不会执行 print "2"
print_event.wait()
print "2"

    event.wait()   #wait 和 clear 一般配套使用。  clear 置flag为阻塞状态（默认）。set 置flag为通路状态
    event.clear()


=============================
import threading
import time

print_event : threading.Event()
print_event1 : threading.Event()
def print1():
    while 1:
        print_event.wait()   #会阻塞任意线程，知道有配套的set（）来解除限制
        print "1"   
        
def print2():
    while 1:
        print_event.set()
        print "2"
        time.sleep(2)
           
t1 : threading.Thread(target : print1,)
t1.start()
t2 : threading.Thread(target : print2,)
t2.start()

query_topo_timer = threading.Timer(int(query_topo_timer_interval), check_if_networking_done)     #定时，延迟间隔时间启动一个线程，该线程存活时间由调用的函数决定。开启的线程与主线程不干扰

import threading
import time
query_topo_timer_interval_2 : 2
start_time : time.time()
def check_if_networking_done():
    #print threading.enumerate()
        used_t : time.time()-start_time
        query_topo_timer : threading.Timer(int(query_topo_timer_interval_2), check_if_networking_done)   #线程中递归调用，定时作用
        query_topo_timer.start()
        print "used_t-%s"%used_t
check_if_networking_done()

===============
import threading

def func():
    print 'hello timer!'

timer = threading.Timer(5, func)     #只调用一次，开启一次定时线程
timer.start()
==============
import threading

def func():
    print 'hello timer!'
    if network:    #加了判断能终止递归
        timer = threading.Timer(2, func)   #递归调用，之后间隔2秒开启线程。递归循环开启定时线程. 
        timer.start()    

timer = threading.Timer(5, func)    #第一次看起定时线程是5s
timer.start()

def check_if_networking_done():
    global is_networking_done
    global query_topo_timer

    if(is_networking_done == False):
        query_topo_timer = threading.Timer(int(query_topo_timer_interval_2), check_if_networking_done)
        query_topo_timer.start()
        query_topo()
query_topo_timer = threading.Timer(int(query_topo_timer_interval_1), check_if_networking_done)
query_topo_timer.start()
==============



-----------if not--------raw_input------raise Exception("XXX")------------------------------------------------------------------------------------------------------
要想引发异常，最简单的形式就是输入关键字raise
	input_str : raw_input('input:\t')  #cmd接受的是字符串类型
	if  not re.match(r'[0-9]|[a-f]|[A-F]',input_str):
		raise Exception('First Letter Not Available')  等价于raise Exception,"First Letter Not Available"
		#raise会终止程序 ？？
------------------查找api-------------------------------------------------------------------------------------------------------------
help(open)
或者
open.__doc__
-----------------判断接收参数是不是数字--------------------------------------------------------------------------------------------------------------
if sys.argv[1].isdigit():
	interface_number : sys.argv[1]
else:
	raise Exception("please input an integer")


---------------binascii----------------------------------------------------------------------------------------------------------------
s : "worker"
b : binascii.b2a_hex(s)  ascii类型不等于bytes类型，是属于bytes类型一部分。python2中，s参数可以是str类型，可以是bytes类型。但python3中s参数必须是bytes类型
print b    #776f726b6572 ,十六进制表示的二进制数据，python2中显示是str型，python中显示是bytes型.python2中str和bytes类型都是string表示
c : binascii.a2b_hex(b)   
print c   #worker


调用BinAscii模块其中的b2a_hex()函数，可把以ASCII编码的文字以十六进制表示：
>>> print binascii.b2a_hex('A')   #参数个数奇数或者偶数
41  #41是十六进制

反之也可把以十六进制表示的文字，换成以ASCII编码的文字：
>>>print binascii.a2b_hex('41')   #参数个数必须是偶数
A 
总结：b2a_hex和a2b_hex对ascii码处理，表现形式不同，一个是16进制的ascii表示，1个是ascii码文字的表示。参数都必须用引号包括，且一个参数个数必须为偶数
-------------------------------------------------------------------------------------------------------------------------------
bin_data += ser.read()
hex_data : bin_data.encode("hex")

-------------------------------------------------------------------------------------------------------------------------------
str_val : "68 0F 00 41 00 02 28 32 00 00 03 01 00 A1 16"
print str_val.replace(' ', '')   #输出680F0041000228320000030100A116


---------------------串口扫描----------------------------------------------------------------------------------------------------------
import serial
import serial.tools.list_ports
   
port_list : list(serial.tools.list_ports.comports())
if len(port_list) <= 0:  
    print "The Serial port can't find!"  
    
for per_port in port_list:
    print per_port  
*************
输出：
COM9 - USB Serial Port (COM9)
COM8 - USB Serial Port (COM8)
COM11 - ELTIMA Virtual Serial Port (COM11->COM12)
COM12 - ELTIMA Virtual Serial Port (COM12->COM11)
COM13 - ELTIMA Virtual Serial Port (COM13->COM14)
COM14 - ELTIMA Virtual Serial Port (COM14->COM13)
COM16 - ELTIMA Virtual Serial Port (COM16->COM15)
COM15 - ELTIMA Virtual Serial Port (COM15->COM16)
*************
for per_port in port_list:
    per_port_list : list(per_port)		#串口类型转换成list类
    print  per_port_list
输出：
[u'COM9', u'USB Serial Port (COM9)', 'USB VID:PID:0403:6001 SER:AI05UXKFA']
[u'COM8', u'USB Serial Port (COM8)', 'USB VID:PID:0403:6001 SER:AI05UXS9A']
[u'COM11', u'ELTIMA Virtual Serial Port (COM11->COM12)', u'VSBC7\\DEVICES\\0000']
[u'COM12', u'ELTIMA Virtual Serial Port (COM12->COM11)', u'VSBC7\\DEVICES\\0001']
[u'COM13', u'ELTIMA Virtual Serial Port (COM13->COM14)', u'VSBC7\\DEVICES\\0002']
[u'COM14', u'ELTIMA Virtual Serial Port (COM14->COM13)', u'VSBC7\\DEVICES\\0003']
[u'COM16', u'ELTIMA Virtual Serial Port (COM16->COM15)', u'VSBC7\\DEVICES\\0004']
[u'COM15', u'ELTIMA Virtual Serial Port (COM15->COM16)', u'VSBC7\\DEVICES\\0005']
for per_port in port_list:
    per_port_list : list(per_port) 
    print  per_port_list[0]  #截取list[0]
输出：
COM9
COM8
COM11
COM12
COM13
COM14
COM16
COM15


----------------------字节与字节数组----byte-----------------------------------------------------------------------------------------------------
字符串类型是对人类友好的符号，但计算机只认识一种符号，那就是二进制（binary）数
我们需要一张数字与字符对应的表。我们都知道在计算机中 1 byte : 8bits，可以存储 0~255 共256个值，也就是说 1byte 最多可以表示 256 个字符，在最初的计算机世界中，256 足以容纳所有大小写英文字母和 0~9 阿拉伯数字以及一些常用的符号，于是就有了 ASCII 编码

不同的编码里面汉字长度是不同的，
国家标准GB2312： 一个汉字＝2个字节
UTF－8：一个汉字＝3个字节

字符串有 decode 方法，而字节有 encode 方法，我们这里先简单看一下 encode('ascii') 。对于给定的字符我们可以通过编码得到它在编码表里面的坐标（即码位），因此对字符进行encode('ascii')操作是找到其在 ASCII 中的位置
Python中的字节码用b'xxx'的形式表示。x可以用字符表示，也可以用ASCII编码形式\xnn表示，nn从00-ff(十六进制)共256种字符。
字符串有encode方法，字节有decode方法
字节（字节数组）是二进制数据组成的序列，其中每个元素由8bit二进制即1byte亦即2位十六进制数亦亦即0~255组成；
字节是计算机的语言，字符串是人类语言，它们之间通过编码表形成一一对应的关系；
最小的 ASCII 编码表只需要一位字节，且只占用了其中 [31,127] 的码位；
不是所有的字节都是可显示的，甚至有些字节无法对应到ASCII码上（因为ASCII码只定义了128个字符，而一个字节有256个。比如0000 0000对应的ASCII是不可显示的、0111 1111没有对应的ASCII码。
为了表示这些无法显示的字节，就引入了\x符号，其表示后续的字符为16进制。如，\x00表示16进制的00，也就是二进制的0000 0000。至此，所有字节都可被表示。
为了显示方便，将b'e\x00\x00d\x00\x007Z\x00\x00d\x01\x00S'转为16进制来显示。
Python中的字节码用b'xxx'的形式表示。x可以用字符表示，也可以用ASCII编码形式\xnn表示，nn从00-ff(十六进制)共256种字符。\x**  用2个16进制数表示一个字符
在Python中，bytes和string是不同的东西。由一系列不可改变的Unicode字符组成的叫string。而一系列不可改变的介于0-255之间的数字被称为bytes对象。 
>>> c.co_code.hex()
'650000640000375a000064010053'

python:字符串转换成字节的三种方式 
python2 中无bytes类型，python3有
str='zifuchuang'
第一种 b'zifuchuang'   #type  <class 'bytes'>
第二种bytes('zifuchuang',encoding='utf-8')    #type  <class 'bytes'>
第三种('zifuchuang').encode('utf-8')    #type  <class 'bytes'>
 
b : b'a boy likes me'
print (b)  #输出：b'a boy likes me'
print (type(b))  #输出：<class 'bytes'>

b : b'a boy likes me'
s : 'a boy likes me'
print (str.encode(s))    #b'a boy likes me'
print (bytes.decode(b))  #a boy likes me
print (bytes(s,encoding="utf-8"))  #b'a boy likes me'   "utf-8"可以写成"utf8"
print (str(b,encoding="utf-8"))   #a boy likes me
----------------------编码-------bytes----utf-8----ascii------------------------------------------------------------------------------------------
请输入一个字符: a
请输入一个ASCII码: 101
a 的ASCII 码为 97, ascii码表现是数字？
***
bytes类型，字节数据类型也就是二进制类型，这个是python3专有数据类型，在python2里跟字符串是一个类型，也就是python2是不区分这个数据类型的。
比如说音频，视频文件都是二进制类型，也就是bytes类型。（python3通过socket在网络上传输数据时必须要用二进制格式,python2没有强制必须是二进制，字符串也可以）
Python3中最大的新特性就是对文本和二进制数据做了更清晰的区分。文本通常是Unicode字符集，并且用str字符串类型表示，而二进制数据用bytes字节类型表示。在Python3中，字符串str和字节bytes是不可以混合使用的，这也使得二者之间更以区分。你不能将字符串和字节连接起来，不能在字符串中得到字节，也不能在字节中得到字符串，也不能通过函数传参字符串以期望得到字节，反之亦然。
py3里，只有 unicode编码格式 的字节串才能叫作str。
其他编码格式的统统都叫bytes，如：gbk，utf-8，gb2312…………
这些bytes要转换为 unicode编码 才能当作str来用，就需要知道 bytes 的编码格式。
如果你事先知道，比如gbk，就可以用 bytes.decode('gbk')将bytes解码为unicode字符。
如果很不幸，你有一堆bytes，不知道它们的编码（例如 网站服务器返回的响应体），
这时候，你就需要chardet 来测试它们的编码。
************************
string ->（encode） bytes
bytes->（decode） string
************************


注意了，由于在网络编程里传输必须是byte类型，那么如果你传输的是英文字母或者数字的话，下面的三种写法都是一样的：
aaa="abc123".encode("UTF-8")
aaa="abc123".encode(encoding='UTF-8'） 
aaa:b"abc123"
但是如果你的字符串是中文的话，那么必须写成：
aaa="大家好".encode("UTF-8")
aaa="大家好".encode(encoding='UTF-8'） 
而aaa:b"大家好"是非法的
也就是ASCII码是可以前面直接加b来表示byte类型的，但是非ASCII码的就不可以这样了。
*********字符串的编码解码 encode  decode***************
str.encode(encoding='UTF-8',errors='strict')
str.decode(encoding='UTF-8',errors='strict')
一个例子：
str : "this is string example....wow!!!";
print "Encoded String: " + str.encode('base64','strict') #encode
print "Decoded String: " + str.decode('base64','strict') #decode

输出：Encoded String: dGhpcyBpcyBzdHJpbmcgZXhhbXBsZS4uLi53b3chISE:
      Decoded String: this is string example....wow!!!


************************
Unicode码 为了兼容ASCII，Unicode规定前0-127个字符是和ASCII是一样的，不一样的是128-255这一部分。

----------------log------日志格式------logging模块---------------------------------------------------------------------------------------------------
小项目的格式（推荐）： 时间戳stamp+文件名+行号+line（内容）  
大项目 不加文件名和行号？

发现：
    1、同一个文件有多个logging的定义，以第一个logging定义的为准。 比如import的文件中有logging定义，logging对文件和被引用的文件都起作用。
    logging可以定义在import文件中，引用它的文件就可以不用定义logging了，是不是更省事？
    
    2、一个py文件调用另一个py文件，如果两个文件都有各自的logging定义，各自的logging定义分别对自己的打印有效



#####################
#python之logging模块#
################################################################################################
import logging (logging里先添加一个logger，再添加2个handler，一个（FileHandler）用于记录在文件里，一个（StreamHandler）用于控制台显示，最后把两个handler加进logger里)

    # aa、定义handler的输出格式（formatter）
    formatter : logging.Formatter('%(asctime)s[%(filename)s line:%(lineno)d] %(levelname)s: %(message)s') 
    
    # 1、创建一个logger 
    logger : logging.getLogger() 
    logger.setLevel(logging.DEBUG) 

    # 2、创建一个handler，用于写入日志文件 
    fh : logging.FileHandler('test.log') 
    fh.setLevel(logging.DEBUG) 
    fh.setFormatter(formatter)  #给handler添加formatter
    
    #3、 再创建一个handler，用于输出到控制台 
    ch : logging.StreamHandler() 
    ch.setLevel(logging.DEBUG) 
    ch.setFormatter(formatter)  #给handler添加formatter
    
    #4、给logger添加handler 
    logger.addHandler(fh) 
    logger.addHandler(ch)
    
    使用：
        logger.info('test info')
-----------------------------------


同事写的例子：（代码的效果是日志写入文件同时控制台输出）
	import logging
	logging.basicConfig(level=logging.INFO,   #log文件写入等级
						format='[%(asctime)s %(filename)s line:%(lineno)d]%(levelname)s:  %(message)s',
						filename=r"D:\workfile\zhongkeyuan_workspace/test.log",
						filemode='a'
						)
	console = logging.StreamHandler()
	console.setLevel(logging.INFO)     #设置控制台输出等级
	formatter = logging.Formatter('[%(asctime)s %(filename)s line:%(lineno)d]%(levelname)s:  %(message)s')
	console.setFormatter(formatter)
	logging.getLogger().addHandler(console)
    logging.info("Here should not have addr!")
    logging.info("This is a invalid datagram!")
输出：
2018-02-24 18:59:32,926 test.py[line:13] INFO Here should not have addr!
2018-02-24 18:59:32,927 test.py[line:14] INFO This is a invalid datagram!
-----------------------
####主文件内容###
import logging   #每个有logging 打印的文件，都需要import logging
import time
import os
import test_my  #导入自己创建的包。 test_my文件夹下(用__init__.py)，__init__.py内容：import untitled2（untitled2是test_my文件夹下的一个文件）

log_path : r"./logtest"
if not os.path.exists(r"./logtest"):
    os.makedirs(r"./logtest")
stf : time.strftime("%Y%m%d%H%M%S", time.localtime())
log_file_name : "test%s.log"%stf
logging.basicConfig(level:logging.DEBUG,
                    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                    filename : log_path + '\\' + log_file_name,
                    filemode='a')
console : logging.StreamHandler()
console.setLevel(logging.INFO)
formatter : logging.Formatter('%(asctime)s %(levelname)s %(message)s')
console.setFormatter(formatter)
logging.getLogger().addHandler(console)

def f():
    logging.warning("waring")
    
    
    
if __name__ == "__main__":
    logging.info("main start:")
    logging.error("main start:2")
    f()
    test_my.untitled2.test1()   #调用test1

---------log的另一种使用方法-conf-------------
log的另一种配置：
    #log.conf文件内容：
        [loggers]
        keys:root,infoLogger

        [logger_root]
        level:DEBUG
        handlers:consoleHandler,fileHandler

        [logger_infoLogger]
        handlers:consoleHandler,fileHandler
        qualname:infoLogger
        propagate:0

        [handlers]
        keys:consoleHandler,fileHandler

        [handler_consoleHandler]
        class:StreamHandler
        level:INFO
        formatter:form02
        args=(sys.stdout,)

        [handler_fileHandler]
        class:FileHandler
        level:INFO
        formatter:form01
        args=('runlog.log', 'a')

        [formatters]
        keys:form01,form02

        [formatter_form01]
        format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s

        [formatter_form02]
        format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s
        
    文件中引用log配置:
        import logging
        import logging.config
        CON_LOG='../log/log.conf'
        logging.config.fileConfig(CON_LOG)
        logging:logging.getLogger()
        logging.debug("debug")

################################################################################################
--------------------------------------------------------------------------------------------------------------------------------------------------------
参数说明：
filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。
filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。
format：指定handler使用的日志显示格式。 
datefmt：指定日期时间格式。 
level：设置rootlogger（后边会讲解具体概念）的日志级别 
stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。
---------------
format参数中可能用到的格式化串：
%(name)s Logger的名字
%(levelno)s 数字形式的日志级别
%(levelname)s 文本形式的日志级别
%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有
%(filename)s 调用日志输出函数的模块的文件名
%(module)s 调用日志输出函数的模块名
%(funcName)s 调用日志输出函数的函数名
%(lineno)d 调用日志输出函数的语句所在的代码行
%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示
%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数
%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒
%(thread)d 线程ID。可能没有
%(threadName)s 线程名。可能没有
%(process)d 进程ID。可能没有
%(message)s用户输出的消息
--------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------
s : ord('a')  #ascii码值97， ascii 为int型
chr(97)		  # 字符a

--------------fileinput-----------------------------------------------------------------------------------------------------------------
fileinput模块可以对一个或多个文件中的内容进行迭代、遍历等操作。该模块的input()函数有点类似文件
readlines()方法，区别在于前者是一个迭代对象，需要用for循环迭代，后者是一次性读取所有行。
用fileinput对文件进行循环遍历，格式化输出，查找、替换等操作，非常方便。

import fileinput
for eachline in fileinput.FileInput(config_file):

import logging
import fileinput
###
一个例子：
file : open("_name.txt")
content : file.readlines()
print "content:"
for line in content:
	print line
	
print "fileinput"
for line in fileinput.FileInput("_name.txt"):
	print line
###
-------------------------------------------------------------------------------------------------------------------------------
    c_thread : threading.Thread(target:get_flash_log, args=(ser, trans_queue, log_file, ))
    c_thread.setDaemon(True)   #守护线程，主线程终止后，子线程也随着终止
    c_thread.start()

---------------------python中;相当于把一行分割多行-----，（逗号）起连接的作用-----------------------------------------------------------------------------------------------------
print "1","2"
print "3";"4"
***
输出：
C:\Users\Mir-Z\Desktop\hava_a_try>test.py
1 2
3


-------------------------------------------------------------------------------------------------------------------------------
python语句中的 end=''是什么意思呢 
	for line in f:
		print(line, end=' ') 

为末尾end传递一个空字符串，这样print函数不会在字符串末尾添加一个换行符，而是添加一个空字符串。这个只有3版本有用。2.*版本不支持 

---------------------修改文本内容----------------------------------------------------------------------------------------------------------
def alter(file, old_str, new_str):
    file_data : ""
    with open(file, "r") as f:   #先只读的方式打开文件，获取文件内容
        for line in f:
            if old_str in line:
                line : line.replace(old_str,new_str)
            file_data += line
    with open(file,"w") as f:   #with方式，关闭后再打开以写的方式打开文件
        f.write(file_data)

-------------------------------------------------------------------------------------------------------------------------------
with open("config.ini") as f:   #file对象可迭代？
	for line in f:
		print line 


-------------------------------------------------------------------------------------------------------------------------------
a : 'aabbccddeeff'
a_bytes : a.decode('hex')
print a_bytes
输出： b'\xaa\xbb\xcc\xdd\xee\xff'
aa : a_bytes.encode('hex')
printaa
输出：aabbccddeeff


import binascii
a : '\xa8C'
# print the whole string
print binascii.b2a_hex(a)
print len(binascii.b2a_hex(a))
# Print every byte
print binascii.b2a_hex(a[0])
print binascii.b2a_hex(a[1])
输出：
a843
4
a8
43
-------------------------------------------------------------------------------------------------------------------------------
a,b : (2,3)
print a,b

c,d : 4,5
print c,d

输出：
2 3
4 5

-------------------------------------------------------------------------------------------------------------------------------
str : "68 86 57 70 01 00 16 68 11 04 33 33 34 33 16 16".replace(" ", "")
print str
print str.encode("hex")
print str.encode("hex").decode("hex")

输出：
68865770010016681104333334331616
3638383635373730303130303136363831313034333333333334333331363136
68865770010016681104333334331616

-------------------------------------------------------------------------------------------------------------------------------
log_file_name :  "cctt_read_meter_log" + "_" + "(" +\
        time.strftime('%m-%d__%H-%M', time.localtime(time.time())) + ")" + ".txt"    #将时间转为str类型

-----------------------bat---批处理文件-----------------------------------------------------------------------------------------------------
@echo off    可以加一个“echo off”，当然，“echo off”也是命令，它本身也会显示，如果连这条也不显示，就在前面加个“@”。
rem 注释
timeout 10    超时，cmd中显示等待 10 秒，按一个键继续 ...

cd C:\Automation\Scripts\Reading_meter  #进入*文件
start python assemble_3762.py  #运行*文件
---
@echo off
set current_path=%cd%
python %current_path%\resultAnalysis.py > %current_path%\readMeterResult.txt
---
  

---------------------线程--进程--subprocess------------------------------------------------------------------------------------------------------
打开一个程序就是打开一个进程，如果同一个程序中处理多任务，就用线程，线程比进程开销要小得多 
subprocess通过子进程来执行外部指令，并通过input/output/error管道，获取子进程的执行的返回信息。
subprocess.call()：执行命令，并返回执行状态，其中shell参数为False时，命令需要通过列表的方式传入，当shell为True时，可直接传入命令
output : check_output(r'start python C:\Automation\Scripts\Reading_meter\cctt_simulate.py', shell:True)
title analysis test results_for_cli #cmd的窗口标题
TASKKILL /F /IM python.exe /T   杀死进程
# /f是强制终止 /im   image name的缩写，图像名。你要终止进程要让命令知道你要终止哪个进程啊，image name能区分进程，或者进程的PID能区分进程，就是说根据你的提供的是进程名或者是进程PID来决定是写/im或/pid。/t 你一定听说过结束进程树吧，t 就是tree的缩写


-------------------------------------------------------------------------------------------------------------------------------
content_read : ccttname.read() #读取文件全部，也可自定义读取字节大小的内容

content_readline : ccttname.readline() #读取文件首行，str类型
____
file1 : open("whitelist_test.txt", "rb+")
line : file1.readline()
while(line):
    print line
    line : file1.readline()    #循环读完整个文档
file1.close()
____
f : open(r"E:\CRTLog\CCO_Serial-COM3-0412-215010.log","r")
conent : f.readlines(40000000)   #读取单位是B。
i : 0
while conent:
    with open("11114444_%d.log"%i,"a") as ff:
        ff.writelines(conent)
        conent : f.readlines(40000000)
    i += 1
____
for index, line in enumerate(open(r"E:\CRTLog\CCO_Serial-COM3-0412-215010.log",'r')):
    print index,line



content_readlines: ccttname.readlines()  #读取文件全部，返回list类型，可用 for逐行打印出来


-------------------------------------------------------------------------------------------------------------------------------
同级目录下，直接用import导入

---------------------wing IDE的使用-----查看代码的调用的快捷键-----------------------------------------------------------------------------------------------------
alt+<-          返回上一级函数
alt+->          返回下一级函数
ctrl+鼠标左键   进入函数内部，或者变量声明的地方

-------------------------------------------------------------------------------------------------------------------------------
import msvcrt
if ord(msvcrt.getch()) in [13]:   #按回车键是退出。回车键的ascii码值是13
            exit()

-------------------------------__init__.py文件-初始化包文件-----------------------------------------------------------------------------------------------
__init__.py文件内容    #__init__.py、os_utils.py、proto_3762.py 这3个文件同一级目录
import os_utils
import proto_3762

__init__.py的上一级目录导入这两个文件，需用 from cutils import *    ,cutils是个文件夹名。 同级目录用import,其子目录用from XX import xx，部分引用
----------------------continue-----breack----------------------------------------------------------------------------------------------------
continue和breack都必须在loop（循环）中。
continue和breack之后的代码都不执行
continue是退出子循环，跳到下一个子循环；breack是退出while或者for的大循环。

-------------------------for或while的--断点调试----------------------------------------------------------------------------------------------------
断点打在for循环中，当for循环中只有一个断点时，相当于打了N个断点。执行到下一个断点，就是for中循环了1次。
断点打在for前面，程序没有进入循环体；断点打在for后面，程序停在for后面的断点处
for中的条件断点，如x ==5 。 for中的条件断点，相当于1个断点。条件断点可打在for循环体中，也可打在不是循环体的代码中。一般起到判断作用，当表达式为真，条件断点才是有效断点，否则忽略该断点，程序不会在该无效断点处停留。
逐行调试完一个文件后，调试运行完最后一行时，会出现长长一条横杠，运行完这个文件后，逐行进入下一个文件，又回到了调试的状态。

------------------------import导入--------import和main的执行顺序-----------------------------------------------------------------------------------------------
import导入的文件，会将导入的文件运行一次。比如导入的文件有打印，最终也会打印出导入的文件的打印
导入的文件里，不要有死循环，比如死while。这样会导致程序一直停止import的文件的死循环中，主文件中的代码不能执行
一个文件中，先执行import，及import文件里的代码，然后执行main函数
----------------------文件中代码执行顺序-----------------------
import test
print "between"
def print1():
    """
    print str
    """
    print "print1"
    
if __name__ == "__main__":(main函数只是函数调用执行的入口，不是文件执行的入口)
    print "MAIN"
	print1()
print "after MAIN"
输出：（从文件的上到下，顺序执行。def函数中的代码不执行[def中的代码需要从main函数进入，调用执行],import会执行导入文件的代码从上到下顺序执行）
1
2
3
between
MAIN
print1
after MAIN
-----------------------------class--定义类------------------------------------------------------------------------------------------------
类定义时， class（）中写入父类，实例化类是，（）中写入的是__init__对应的参数
__init__：有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，这个函数不一定有
变量写在类函数里 才可以加self.， 类函数外不能加self.
类属性，类中的方法都直接可以访问，不需要通过传参方式传递
class 类名：
class 类名（）：   #继承类才加（）

Static 静态方法，直接通过类名调用，静态成员属于类本身，不属于类的实例，它无法访问实例的属性（数据成员或成员函数）

Class， 通常情况下，类实例是解释器自动调用类的__init__()来构造的，但借助classmethod可以在解释器调用__init__前实现一些预处理逻辑，然后将预处理后的参数传入类的构造函数来创建类实例。


class pkt_creator:
    def __init(self,prefix):
        self.prefix : 0         #self.prefix指的是实例变量，而不是def __init函数的参数
        self.len : 0
        self.ctrl : hex_list[offset]                    # 1 byte, ctrl
        self.res : hex_list[offset: offset + 6]         # 6 byte, resource
        pass


    def _parse_header(self, hex_list):
        offset : 0
        self.prefix : hex_list[offset]                  # 1 byte , prefix
        offset += 1
        self.len : fromHexList(hex_list, offset, 2)     # 2 byte ,length
        offset += 2
        self.ctrl : hex_list[offset]                    # 1 byte, ctrl
        offset += 1
        self.res : hex_list[offset: offset + 6]        # 6 byte, resource
        offset += 6
        return offset

        
class outdoor:
    class Door:#内部类
        verbose_name : '栏目'
        verbose_name_plural : '栏目'
outd : outdoor()
print outdoor.Door().verbose_name     #第一种调用方式，通过类名调用
print outd.Door().verbose_name        #第二种调用方式，通过实例调用
        

----------------------write--writelines-------------------------------------------------------------------------------------------------------
writelines() 方法用于向文件中写入一序列的字符串。
这一序列字符串可以是由迭代对象产生的，如一个字符串列表。
换行需要制定换行符 \n。
语法
writelines() 方法语法如下：
fileObject.writelines( [ str ])
参数
str -- 要写入文件的字符串序列。 
返回值
该方法没有返回值。

fo : open("test.txt", "w")
print "文件名为: ", fo.name
seq : ["aaa 1\n", "aaa 2"]
fo.writelines( seq )
fo.close()

-----------------------split-分割字符串---字符串的相关函数，相关操作----------------------------------------------------------------------------------------------------
str.split(str="", num:string.count(str)).
参数
str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。
num -- 分割次数。

line.lstrip()   #左截取
line.strip()    #两头截取
line.rstrip     #右截取
-------------------------------------------------------------------------------------------------------------------------------
不是与exit()同层级的之后的不执行，而是exit()后的代码都不执行，退出python.exe。
一个例子：
reset_data : 1
if reset_data == 1:
    print "1"
    exit()
else:
    print "2"

输出：
1
    

-----------------------------reversed------reverse--------------------------------------------------------------------------------------------
reversed 函数返回一个反转的迭代器。

语法
以下是 reversed 的语法:
reversed(seq)
参数
seq -- 要转换的序列，可以是 tuple, string, list 或 range。

seqTuple : ('R', 'u', 'n', 'o', 'o', 'b')
print(list(reversed(seqTuple)))
输出：['b', 'o', 'o', 'n', 'u', 'R']

等价于
list.reverse()
print list

--------------------字典操作---有序字典--------------------------------------------------------------------------------------------------------
tasklist : {
"active_reading_meter":2,
"concurrently_reading_meter":10,
"route_reading_meter":3,
"sub_node_register":5
}
current_path : os.getcwd()

for i in tasklist:
    print i   #键名
    print tasklist[i]  #键值
    print "-----------"

输出：
active_reading_meter
2
-----------
sub_node_register
5
-----------
route_reading_meter
3
-----------
concurrently_reading_meter
10
-----------

dictt : {"a":1,"b":2}
for item in dictt.keys():
    print item,dictt[item]
输出：
a 1
b 2


dict1 : {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print dict1["Name"]
print  dict1.keys()
print dict1.values()
print len(dict1)
print dict1.items()
dict1.setdefault("k",)
dict1.setdefault("key",{})["success_cnt"] : 0
dict1["success_cnt"] : 0
print str(dict1)
if dict1.has_key("Age"):
    print dict1["Age"]
print str(dict1)
=======================
import collections
dic = collections.OrderedDict()
dic['a'] : 'A'    #有序插入7
dic['b'] : 'B'
dic['c'] : 'C'
print dic  #输出：OrderedDict([('a', 'A'), ('b', 'B'), ('c', 'C')])  #没有看到普通字典的键值对形式
print dic['a']  #输出：A

for i in dic:
    print i,  #输出：a b c   （遍历键）

for k,v in dic.items():
    print k,v,   #输出：a A b B c C  （遍历键值）
    
=======================
dict : collections.OrderedDict([('555654090010', [0, 1, 2]), ('285714100010', [0, 1, 2])])
print dict
dict['555654090010'].remove(1)  #移除值
print dict   #输出： OrderedDict([('555654090010', [0, 2]), ('285714100010', [0, 1, 2])])
dict.pop('285714100010')   #移除键
print dict   #输出：OrderedDict([('555654090010', [0, 2])])
    
    





---------------------------------控制窗口打印-点.点.--等待效果------------------------------------------------------------------------------------------
while 1:
    time.sleep(0.5)
    print ".",   #cmd窗口打印......


---------------------range---步长-------------------------------------------------------------------------------------------------------
for a in range(0, len(meter_addr_in_cctt), 10):


------------------random-------------------------------------------------------------------------------------------------------------
import random
list : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]   
slice : random.sample(list, 5)   #sample  取样
print slice   #slice  部分

随机整数：
>>> import random
>>> random.randint(0,99)
21
随机选取0到100间的偶数：
>>> import random
>>> random.randrange(0, 101, 2)
42
随机浮点数：
>>> import random
>>> random.random() 
0.85415370477785668
>>> random.uniform(1, 10)
5.4221167969800881
随机字符：
>>> import random
>>> random.choice('abcdefg&#%^*f')
'd'
多个字符中选取特定数量的字符：
>>> import random
random.sample('abcdefghij',3) 
['a', 'd', 'b']
多个字符中选取特定数量的字符组成新字符串：
>>> import random
>>> import string
>>> string.join(random.sample(['a','b','c','d','e','f','g','h','i','j'], 3)).r
eplace(" ","")
'fih'
随机选取字符串：
>>> import random
>>> random.choice ( ['apple', 'pear', 'peach', 'orange', 'lemon'] )
'lemon'
洗牌：
>>> import random
>>> items : [1, 2, 3, 4, 5, 6]
>>> random.shuffle(items)
>>> items
[3, 2, 5, 6, 4, 1]

-------------------串口收发送报文-----串口收报文-------------------------------------------------------------------------------------------------------
串口收发报文。 发包后用threading.event()的wait()阻塞，待处理好包后用set()解除线程阻塞
串口等待超时，一种实现方式是， 设置个queue，将queue中添加个timeout。recvd_buff : data_que.get(block : True, timeout : wait_timeout)
inWaiting():返回接收缓存中的字节数

      decode                  encode
str ---------> str(Unicode) ---------> str

query_main_addr : "68 0F 00 43 01 00 5F 00 00 00 03 08 00 AE 16 "
query_main_addr_no_space : query_main_addr.replace(" ","")
_03F4 : query_main_addr_no_space.decode("hex")   #第一种方式
_03F4 : binascii.a2b_hex(query_main_addr_no_space)   #第二种方式

---串口接收报文1--
    if ser.inWaiting != 0:
        query_info.put(ser.readline())
        line : query_info.get()
        print "recv-1",line
        print "recv-2",line.encode("hex")             #第一种方式
        print "recv-3",binascii.b2a_hex(line.strip()) )   #第二种方式
--------      
import binascii

cmd_str : "68 0F 00 43 00 00 5F 00 00 01 03 02 01 A9 16"
cmd_str : cmd_str.replace(" ","")
cmd : binascii.a2b_hex(cmd_str)
print cmd
cmd1 : cmd.encode("hex")
cmd2 : binascii.b2a_hex(cmd)
print cmd1 
print cmd2


输出：
h\000C\000\000_\000\000�
680f004300005f000001030201a916
680f004300005f000001030201a916
----------
		
输出：
recv-1 h\000�\000\000\000\000\000\000\000HT\000\000\000e
recv-2 681800830000000000000301004854000016031811006516
recv-3 681800830000000000000301004854000016031811006516


---串口接收报文2--
while True:
    data += ser.read()
    ser_str_data_tmp : binascii.b2a_hex(data)
    ser_str_data : ser_str_data_tmp.lower()
    #print "00 --> %s" %ser_str_data
    if ser_str_data.startswith("fe") or ser_str_data.startswith("68"):
        #print "01 --> %s" %ser_str_data
        while(ser_str_data.startswith("fe")):
            ser_str_data : ser_str_data[2:]

        dtgm_obj : re.match(r"(\A(68)(\w{12})68(\w{2})+16)", ser_str_data)
        if dtgm_obj:
            str2hex : binascii.a2b_hex(ser_str_data[0:-4])
            hex_list : bytearray(str2hex)
            cal_sum : hex_to_str(sum(hex_list), 1)
            if cal_sum != ser_str_data[-4:-2]:
                continue
            else:
                if ('68110434483337' in ser_str_data or '68141636483337' in ser_str_data) and (int(argv_4) != 0):
                    event_report_que.put(ser_str_data)
                    data : ''
                else:
                    read_meter_que.put(ser_str_data)
                    data : ''
                 
            
--------------------守护线程---阻塞线程-------------------------------------------------------------------------------------------------------
    f_thread : threading.Thread(target : recv_data_from_serial, args=(ser, q_info, ))  #将recv_data_from_serial设置为守护线程，即后台线程，为前台线程（用户线程）服务
    f_thread.setDaemon(True)
    f_thread.start()

 
另外有几点需要注意：
    1、setDaemon(true)必须在调用线程的start（）方法之前设置，否则会跑出IllegalThreadStateException异常。
    2、在守护线程中产生的新线程也是守护线程。  
    3、 不要认为所有的应用都可以分配给守护线程来进行服务，比如读写操作或者计算逻辑。

	
阻塞线程：A，B线程有一个公共的资源，比如说变量params，当A访问params时，给params加锁，而这时B要访问params时，它只有等待A释放params锁时，才可以访问；抢占资源失败导致。阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回
。
非阻塞线程：A，B线程有一个公共的资源，比如说变量params，当A访问params时，B也可以进行访问操作；

####线程间通信，通过queue############
import Queue
import threading

def in_q(info_q):
    info_q.put("AAAAAAA")

def out_q(info_q):
    print info_q.get()

q : Queue.Queue()
t1 : threading.Thread(target:in_q,args=(q,))
t2 : threading.Thread(target:out_q,args=(q,))
t1.start()
t2.start()
####线程间不通信############
import threading

def in_q():
    print "in"

def out_q():
    print "out"
t1 : threading.Thread(target:in_q,) #不通信，少个info_q参数。这里仅是开启个线程
t2 : threading.Thread(target:out_q,)
t1.start()   #开启单个线程
t2.start()
print t1.getName()    #Thread-1 ,线程名字
print t2.getName()    #Thread-2

资源竞争   为了避免线程不同步造成数据不同步，可以对资源进行加锁 也就是访问资源的线程需要获得锁，才能访问
####多线程间####将线程加入到list中，然后迭代list，开启多个线程########
import threading

thread_list : []
def print_num (num):
    print num

for i in range(1,99):
    t : threading.Thread(target:print_num,args=(i,))
    thread_list.append(t)    #将线程加入到list中，然后迭代list，开启多个线程
for thread1 in thread_list:
    print thread1.getName()   #打印线程名字
    thread1.start()
    thread1.join()    #阻塞线程，等上一个线程完成后，才进行下一个

####线程改名字#####
t1.setName("newname")
print "set t1's name to newname:",t1.getName()    #Thread-1改为newname
###################

start()，启动线程
join([timeout])，等待另一线程结束后再运行。多线程多join的情况下，依次执行各线程的join方法，前头一个结束了才能执行后面一个。无参数，则等待到该线程结束，才开始执行下一个线程的join。设置参数后，则等待该线程这么长时间就不管它了（而该线程并没有结束）。不管的意思就是可以执行后面的主进程了
setDaemon(bool)，设置子线程是否随主线程一起结束，必须在start() 之前调用，默认为False。如果在start()之前设置t1.setDaemon(True)则不阻塞主线程，后台运行
setDaemon  子线程设置成守护线程，防止主线程运行完退出而没拿到子线程的结果。可在主线程中加入等待子线程的代码。如将串口收发包设置成setdameon，主线程中用que.get()来获取子线程的结果，等待子线程。


t1 : threading.Thread(target:in_q,)
print "alive:",t1.isAlive()   #输出：alive: False
t1.start()
print "alive:::",t1.isAlive()  #输出：alive::: True
#########################################################
线程之所以比进程轻量，其中一个原因就是他们共享内存
#########################################################
对资源进行加锁。也就是访问资源的线程需要获得锁，才能访问。
    def run(self):
        global var
        lock.acquire()  #获取锁
        print 'before,var is ',var
        var += 1
        print 'after,var is ',var
        lock.release()  #释放锁
%%%%%%%%%%%%%%%%%%
queue : Queue()
def do_job():
    while True:
        i : queue.get()  #每个线程无限循环阻塞读取queue队列的项目item，并处理
        time.sleep(1)
        print 'index %s, curent: %s' % (i, threading.current_thread())
        queue.task_done()  #每次完成一次工作后，使用queue.task_done()函数向任务已经完成的队列发送一个信号

if __name__ == '__main__':
    # 创建包括3个线程的线程池
    for i in range(3):
        t : Thread(target:do_job)
        t.daemon:True # 设置线程daemon主线程退出，daemon线程也会推出即时正在运行.与range生成守护线程池
        t.start()

    # 模拟创建线程池3秒后塞进10个任务到队列
    time.sleep(3)
    for i in range(10):
        queue.put(i)
    queue.join()  #如果是想做完一定数量任务的队列就结束，使用queue.join()，比如爬取指定数量的网页如果是想线程做完任务就结束，使用thread.join()
%%%%%%%%%%%%%%%%%%
ta : threading.Thread(target:testa)
tb : threading.Thread(target:testb)
for t in [ta,tb]:   #将线程放入list中来启动线程
    t.start()
for t in [ta,tb]:
    t.join()
print "DONE"
%%%%%%%%%%%%%%%%%%
threading.enumerate()

------------------进程-------------------------------------------------------------------------------------------------------------
multiprocessing ：多进程模块，multiprocessing中的progress，开启单个进程

子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID os.getppid()。windows下，没有getppid（）函数

#####开启单个进程##########
from multiprocessing import Process
import os

def run_proc(name):
    print 'Run child process %s (%s)...' % (name, os.getpid())

if __name__=='__main__':
    print 'Parent process %s.' % os.getpid()   #通过os.getpid()获取父进程。windows下，没有getppid（）函数
    p : Process(target:run_proc, args=('test',))  #开启子进程
	p.start()
    p.join()   #join()方法可以等待子进程结束后再继续往下运行
	
	
	
    p1 : Process(target:run_pr1, )
    p2 : Process(target:run_pr2, )
    p1.start() #
    p1.join()  # 系统会等p1运行完才运行p2
    p2.start() #
    p2.join()  #
	
	p1.start() #
    p2.start() #与上面的区别是，操作系统会交替运行p1 p2 线程
	p1.join()  #
    p2.join()  #
#####多进程##进程池########

from multiprocessing import Pool
import os, time, random

def long_time_task(name):
    print 'Run task %s (%s)...' % (name, os.getpid())
    start : time.time()
    time.sleep(random.random() * 3)
    end : time.time()
    print 'Task %s runs %0.2f seconds.' % (name, (end - start))

if __name__=='__main__':
    print 'Parent process %s.' % os.getpid()
    p : Pool()  #p:Pool(5)就可以同时跑5个进程。Pool的默认大小是CPU的核数，如果你不幸拥有8核CPU，你要提交至少9个子进程才能看到上面的等待效果
    for i in range(5):
        p.apply_async(long_time_task, args=(i,))
    print 'Waiting for all subprocesses done...'
    p.close()   #对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。
    p.join()
	
pool.apply_async  apply_async 方法用来同步执行进程，允许多个进程同时进入池子。
pool.apply  该方法只能允许一个进程进入池子，在一个进程结束之后，另外一个进程才可以进入池子。




####进程间（progress）通信##########
Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据
#####进程线程的安全##########
Lock
多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。



  getpid() 拿自己的进程ID os.getpid()
　　1. os.system(command)
　　# 在一个程序内部启动另一个程序，从而创建一个新进程
　　# os.system 在一个shell中执行command命令
subpocess用于在父进程中创建子进程，如果你希望在Python程序中调用外部程序，如：Powershell、shell、cmd、bat。subprocess将会是一个非常好的选择。
1.os.system    os.system(cmdstr)   这种方式可以很轻松的执行Windows上的命令，但是缺点是： 
不受控，没有返回结果。对于简单的需求而言还行，但是对于需要获取返回结果的就不太适用了
2.os.popen
参数既可以是string，也可以是list。 
subprocess.Popen([“cat”,”test.txt”]) 
subprocess.Popen(“cat test.txt”, shell:True) 
对于参数是字符串，需要指定shell:True
subprocess.call用于代替os.system
subprocess.check_output
while True:
     output : subprocess.check_output(r'start python C:\Automation\Scripts\Reading_meter\cctt_simulate.py', shell:True)   #start 打开新窗口，并在新窗口中有打印
     
start_cmd : r"python3 C:\Users\Mir-Z\Desktop\my\interfaceTest1\dir\dir\testdir1.py"
output : check_output(start_cmd,shell:True)  #无start，不会打开新窗口，看不到被调用脚本的打印

os.system与check_output总结：
    output : check_output：有start，可以看到被调用脚本的打印，无start，则看不到，但是被调用脚本仍会进行，当无start时，想要看到被调用脚本的打印，可以print(output),只是要等被调用程序运行完后才               会打印出里面print的所有内容
    os.system： 有无start，都能看到被调用脚本的打印
    os.system和check_output调用脚本，被调用的脚本里的__name__和主文件一样（当调用的文件是__main__时，被调用里文件也是__main__），被调用的脚本如果需要用到相对路径，其相对路径与调用脚本的相对路径一致（如：被调用脚本里有wirte("log.txt","w"),log.txt会保存在调用脚本的同级目录下，而不是被调用脚本的同级目录下【当调用脚本和被调用脚本不在同一级目录时】）


-------------------------------------------------------------------------------------------------------------------------------


--------------------------函数参数类型可以是类----------------------------------------------------------------------------------------------------
自己写的例子：
def pp(log):
    log.write("aaaaa")

if __name__ == '__main__':
    log : open("aa.txt","w")
    pp(log)
    log.close()
结果：成功写入文件中




----------------------类中的只能是类（父类），继承关系------普通函数往类函数传参数---------------------------------------------------------------------------------------------------
class IncreThread(threading.Thread):
###########
class IncreThread():
    def  __init__(self,parm0):
        self.parm : parm0      #parm 是类的成员，实例化IncreThread时，需要传入该值
    def runnnn(self,parm1):
        global var
        print "self.parm",self.parm
        print "runnnn's parm1",parm1

def use_incre_thread():
    incret : IncreThread("========")    #实例化，参数传递规则："========"  --> parm0 --> self.parm
    incret.runnnn("########")  #函数向类函数传参，第一种方式【】。参数传递规则： "########"  --> runnnn的参数parm1 
    parm_dict : {"runnnn":"+++++++"} 
    incret.runnnn(parm_dict)   #函数向类函数传参，第二种方式【字典形式】。参数传递规则： "+++++++"  --> runnnn的参数parm1
    

if __name__ == '__main__':
    use_incre_thread()

-------------------------------------------------------------------------------------------------------------------------------
if ".log" in logFile:   #文件名查找

-------------------------python读取txt文件最后一行（文件大+文件小）------------------------------------------------------------------------------------------------------
文件小时用readlines():
with open("readMeterResult.txt","r") as f:
    conent : f.readlines()

with open("readMeterResult.txt","w") as f:
    f.writelines(conent[-9:-1])    #读取倒数第9行到  倒数第1行

with open("readMeterResult.txt","a") as f:
    f.writelines(conent[:-9])  #读取文件剩余部分
	
#########
文件大时候：
#coding:utf-8
'''
f_name为所读xx.txt文件
输出为：文件最后一行
'''

fname : 'test.txt'
with open(fname, 'r') as f:  #打开文件
    first_line : f.readline()  #读第一行
    off : -50      #设置偏移量
    while True:
        f.seek(off, 2) #seek(off, 2)表示文件指针：从文件末尾(2)开始向前50个字符(-50)
        lines : f.readlines() #读取文件指针范围内所有行
        if len(lines)>=2: #判断是否最后至少有两行，这样保证了最后一行是完整的
            last_line : lines[-1] #取最后一行
            break
        #如果off为50时得到的readlines只有一行内容，那么不能保证最后一行是完整的
        #所以off翻倍重新运行，直到readlines不止一行
        off *= 2

    print '文件' + fname + '第一行为：' + first_line
    print '文件' + fname + '最后一行为：'+ last_line



-------------------------------------------------------------------------------------------------------------------------------
xrange(5)  等价于 range(0,5)

-------------------------config------conparse------------------------------------------------------------------------------------------------
if(cctt_config.has_option("config","test_type")):
    test_type : cctt_config.get("config","test_type")
    test_type : int(test_type)

----------------------global---------------------------------------------------------------------------------------------------------
def init():
    global data_que    #还可这样定义在函数体内
    data_que : 1

init()
print data_que

-------------------------------------------------------------------------------------------------------------------------------
os.sep   #路径分隔符，输出：\ 

-------------------------------------------------------------------------------------------------------------------------------
import zipfile
from zlib import DEFLATED

def make_zip(source_dir, output_filename):    #改函数为网上抄写的，功能是将一个文件夹打包成zip 文件
    zipf : zipfile.ZipFile(output_filename,compression:DEFLATED,mode="w")
    pre_len : len(os.path.dirname(source_dir))
    for parent, dirnames, filenames in os.walk(source_dir):
        for filename in filenames:
            pathfile : os.path.join(parent, filename)
            arcname : pathfile[pre_len:].strip(os.path.sep)   #相对路径
            zipf.write(pathfile, arcname)
    zipf.close()
    return "automation_test_result_"+now_time+".zip"
	
1，单个文件压缩成zip文件
import zipfile
zipf : zipfile.ZipFile('automation_test_result_20180420173659.zip','r')
zipf.namelist()    #压缩文件里内容的文件名字
zipf.filename      #压缩文件名字
zipf.extractall()  #解压缩
-------------
#单个文件压缩成zip文件
azip : zipfile.ZipFile('CCO_Serial-COM3-0331-171235.zip', 'w')  
azip.write("CCO_Serial-COM3-0331-171235.log",compress_type:zipfile.ZIP_DEFLATED)
azip.close()

-------------------------docx-----word文档-------------------------------------------------------------------------------------------------
doc : Document()    # add a docx file
doc_new : docx.Document()
parg_summary : doc.add_paragraph() #加第一段
parg : doc.add_paragraph()  #加第二段
doc.save(current_path + r"\\"+"readMeterResult.docx")   #保存文件
----------------------父文件夹---------------------------------------------------------------------------------------------------------
current_path : os.getcwd()
parent_path : os.path.dirname(current_path)

----------------------查找指定文件夹下最近一次修改的文件---------------------------------------------------------------------------------------------------------
def find_latest_ccolog(ccoLogPath):
    ccoLogList : []
    for i in os.listdir("E:\CRTLog"):
        if ".log" in i:
            ccoLogList.append(i)
    #对文件修改时间进行升序排列
    ccoLogList.sort(key:lambda fn:os.path.getmtime(ccoLogPath+'\\'+fn))
    return ccoLogList[-1]

---------------------执行cmd命令，并获取输出----------------------------------------------------------------------------------------------------------
os.chdir(ccoLogPath)
result : os.popen(cmd)
res : result.read()  
for line in res.splitlines():  
    print line  

-------------------------------复制文件夹-删除文件夹-----------------------------------------------------------------------------------------------
shutil.rmtree(parent_path+"\\automation_test_result_"+now_time)   #可以删除空目录，有内容的目录
shutil.copytree(r"C:\Automation",r"C:\Automation111111111")   #复制有内容的文件夹或者空文件夹

shutil.copyfile(path2, path4)
shutil.copy：只复制内容，但不会复制permission和last-modify-time等。
shutil.copystat：不复制文件内容，只复制源文件的permission和last-modify-time等到目标文件。
shutil.copy2：相当于调用copy之后，再调copystat。
---------------------------类继承----子类可以直接用父类的方法和属性------------------------------------------------------------------------------------------------
class pkt_3762:
    def __init__(self, afn, fn, dt1, dt2):
	
class pkt_3762_0310dl(pkt_3762):  #继承父类pkt_3762
    def __init__(self):
        pkt_3762.__init__(self, 0x03, 0xa, 2, 1)   #对应父类的参数，个数一致
        self.ch_state : 0xFF   #子类特有的
        self.wait_time : 0x0
        self.err_code : 0        # 1 byte

--------------------makedirs区别mkdir---------------------------------------------------------------------------------------------------------
  os.makedirs(path)
  os.mkdir(path)    上一级目录必须要存在
  shutil.rmtree(path)  删除目录
----------------------------list 操作---------------------------------------------------------------------------------------------------
在同时需要index和value值的时候可以使用 enumerate
list1 : [1,2,3,4,5,6]
list2:list1[::-1]   #将list1 反序
list3=[i*2 for i in list1 if  not i%2 ]  选出偶数，并*2

---------------------取函数返回值的其中一个值----------------------------------------------------------------------------------------------------------
def is_recvd_ok():
    return True,"OK"
ok : is_recvd_ok()[0]
print ok
ok : is_recvd_ok()[1]
print ok

-------------------------------------------------------------------------------------------------------------------------------
import copy
origin : [1,[2,]]
cop1 : copy.copy(origin)  #只复制了母列表
cop1[0] : 11        #自己独有列表
cop1[1][0] : 22     #子列表还是用origin的子列表, 主列表是单独自己的，子列表是之前的
print origin   #输出  [1, [22]]    

cop2 : copy.deepcopy(origin)   #复制出一个独立个体
cop2[0] : 11
cop2[1][0] : 22
print origin


------------------------函数块排列顺序-------------------------------------------------------------------------------------------------------
def aaa():
    print "aaa"
    bbb()
    
aaa()    #aaa()放在此处会报错。因为bbb()在后面

def bbb():
    print "bbb"
aaa()  #aaa()放在bbb()后就不会报错

-----------------退出主线程--------------------------------------------------------------------------------------------------------------

    if int(argv_3) > 32:
        print "Maximum support of 32 meters, please reduce the count of meters!"
        err_exit()

----------------转义序列---------------------------------------------------------------------------------------------------------------

一些转义序列允许一个字符串的字节中嵌入绝对的二进制指。
转义序列     说明
\（行尾）续行符
\\	    反斜杠
\'  	单引号
\"	    双引号
\a  	响铃
\b	    退格（Backspace）
\f	    换页
\n	    换行
\r	    回车
\t	    水平制表符
\v	    垂直制表符
\ooo	值为八进制 ooo 的字符
\xhh	值为十六进制 hh 的字符

假如在串口助手以十六进制发送字符串"abc"，那么你在python中则这样操作“self.l_serial.write(”\x61\x62\x63")    #\x61\x62\x63  转义序列，16进制

--------------------二进制字符串长度---字节串-长度---------------------------------------------------------------------------
二进制字符串长度是字节（8位）长度

----------------------添加环境变量----当前路径---父级路径--------------------------------------------------------------------------------------------------
os.getcwd()
os.pardir  #相对路径 ..
os.path:
	path0 : os.path.realpath(__file__)   #文件所在路径
			或os.path.abspath(__file__)
	path1 : os.path.dirname(path0)       #文件的父级文件夹
			或os.path.abspath(os.pardir)
	GRANDFA : os.path.dirname(path1)	 #文件的祖父级文件夹
使用相对路径：
	sys.path.append(sys.path[0] + r"\..")    #添加父级目录
	sys.path.append(sys.path.append(sys.path[0] + r"\..\.."))  #添加父级目录

区别：
	os.path.dirname(__file__)  #文件所在文件夹
	os.path.realpath(__file__) #文件所在路径
----------------------------串口收发（摘抄网上例子）----字符不存在编码解码------十六进制显示和发送需要编码解码------------------------------
python的串口网上有很多例子，这里了只是把认为好的整理到一起。

1,字符串的发送接收

import serial  
t : serial.Serial('com11',9600)    #com11和com12是一对串口。一头发，另一头收
t1 : serial.Serial('com12',115200)   #波特率不对也能收到，建议应该收发波特率一致吧？
print t.portstr     #输出 com11
strInput : raw_input('enter some words:')  
n : t.write(strInput)      #write 返回写入字节的长度
print n         #输出写入的长度
str : t1.read(n)   
print str  

import serial  
t : serial.Serial('com11',9600)  
t1 : serial.Serial('com12',115200)  
print t.portstr  
strInput : 'enter some words:'
n : t.write(strInput)  
print n  
str : ''
while t1.inWaiting():    #串口有数据的判断，当串口无数据时，为0
    str : str + t1.read()    #read默认读取一个字节
print str  

其中，read(value)方法的参数value为需要读取的字符长度。 如果想要全部读取，提供两个方法： 

1）inWaiting：：监测接收字符。 inWaitting返回接收字符串的长度值，然后把这个值赋给read做参数。

2）readall（）：：读取全部字符。

====================================================


2,十六进制显示

十六进制显示的实质是把接收到的字符逐个转换成其对应的ASCII码，然后将ASCII码值再转换成十六进制数显示出来，这样就可以显示特殊字符了。

在这里定义了一个函数，如hexShow(argv)，代码如下：

import serial  
  
def hexShow(argv):  
    result : ''  
    hLen : len(argv)  
    for i in xrange(hLen):  
        hvol : ord(argv[i])  
        hhex : '%02x'%hvol  
        result += hhex+' '  
    print 'hexShow:',result  
  
t : serial.Serial('com12',9600)  
print t.portstr  
strInput : raw_input('enter some words:')  
n : t.write(strInput)  
print n  
str : t.read(n)  
print str  
hexShow(str)  

=========================================================================================================== 


3,十六进制发送

十六进制发送实质是发送十六进制格式的字符串，如'\xaa'，'\x0b'。重点在于怎么样把一个字符串转换成十六进制的格式，有两个误区：

1）'\x'+'aa'是不可以，涉及到转义符反斜杠

2）'\\x'+'aa'和r'\x'+'aa'也不可以，这样的打印结果虽然是\xaa，但赋给变量的值却是'\\xaa'

 这里用到decode函数，

1.list='aabbccddee'  
2.hexer:list.decode("hex")  
3.print  hexer  

需要注意一点，如果字符串list的长度为奇数，则decode会报错，可以按照实际情况，用字符串的切片操作，在字符串的开头或结尾加一个'0'


假如在串口助手以十六进制发送字符串"abc"，那么你在python中则这样操作“self.l_serial.write(”\x61\x62\x63") ”

当然，还有另外一个方法：
[python] view plain copy 
1.strSerial : "abc"  
2.strHex : binascii.b2a_hex(strSerial)  
3.#print strHex  
4.strhex : strHex.decode("hex")  
5.#print strhex  
6.self.l_serial.write(strhex);  
同样可以达到相同目的。
========================

十六进制显示：byte-（ord）>ASCII值-(hex)>hex显示
十六进制发送：str-decode("hex")->byte->write

import serial  
t : serial.Serial('com11',9600)  
list='aabbccddee'  
hexer:list.decode("hex")      #把 aabbccddee 按照16进制发送
print  hexer  
len : t.write(hexer)
print t1.read(len).encode("hex")


-------------------------timeout----串口超时-queue超时-线程超时------------------------------------------------------------------------------------------------
t1 : serial.Serial('com12',115200,timeout:2)    #超时，会跳过执行后面的代码，且不报错，没有timeout，会阻塞程序
recvd_buff : data_que.get(block : True, timeout : wait_timeout)    #queue超时后报错，没有timeout，会阻塞程序


import serial  
import time
import Queue
t1 : serial.Serial('com12',115200,timeout:2)   #超时，会跳过执行
list='aabbccddee'  
len : t.write(list)
print t1.read(20)   #超时，会跳过执行
================
import serial  
import time
import Queue
que : Queue.Queue()
que.get(timeout:2)   #queue超时后报错
=================
threading
join([timeout]): 阻塞当前上下文环境的线程，直到调用此方法的线程终止或到达指定的timeout（可选参数）。
wait([timeout]): 如果标志为True将立即返回，否则阻塞线程至等待阻塞状态，等待其他线程调用set()。
------------------------------------struct-------------------------------------------------------------------------------------------
>>> a : 'hello'
>>> b : a.encode()
>>> b
b'hello'
>>> c : binascii.hexlify(b)
>>> c
b'68656c6c6f'
==============
import struct
import binascii

values : (1,b'a')
s : struct.Struct('I4s')
packed_data : s.pack(*values)    
#values : (1,1,b'aB',1)
#s : struct.Struct('II2sI')
print packed_data
unpacked_data : s.unpack(packed_data)
print unpacked_data
hex_str : binascii.hexlify(packed_data)   #返回字节流的十六进制字节流
print hex_str
==============
import os
import struct

fp : open('test.bin','wb')
# 按照上面的格式将数据写入文件中
# 这里如果string类型的话，在pack函数中就需要encode('utf-8')
name : b'lily'
age : 18
sex : b'female'
job : b'teacher'
# int类型占4个字节
fp.write(struct.pack('4si6s7s', name,age,sex,job))    #函数原型为：struct.pack(fmt, v1, v2, ...)
fp.flush()
fp.close()
=============
"""
通过buffer方式打包和解包
"""
import struct
import binascii
import ctypes
 
values : (1, b'good', 1.22) #查看格式化字符串可知，字符串必须为字节流类型。
s : struct.Struct('I4sf')
buff : ctypes.create_string_buffer(s.size)    #创建可变字符缓冲区。返回的对象是c_char的ctypes数组。
packed_data : s.pack_into(buff,0,*values)
unpacked_data : s.unpack_from(buff,0)
=============
# -*- coding: utf-8 -*-
"""
buffer方式打包和解包多个对象
"""
import struct
import binascii
import ctypes
 
values1 : (1, b'good', 1.22) #查看格式化字符串可知，字符串必须为字节流类型。
values2 : (b'hello',True)
s1 : struct.Struct('I4sf')
s2 : struct.Struct('5s?')
buff : ctypes.create_string_buffer(s1.size+s2.size)
packed_data_s1 : s1.pack_into(buff,0,*values1)
packed_data_s2 : s2.pack_into(buff,s1.size,*values2)  #offset, 偏移 s1.size
unpacked_data_s1 : s1.unpack_from(buff,0)
unpacked_data_s2 : s2.unpack_from(buff,s1.size)

----------------------------------ctypes---------------------------------------------------------------------------------------------
c# 中的结构体       
public struct cli_host_get_device_param_t
 {
     public UInt16 start;
     public UInt16 count;
     public Byte version;
 }
对应python中的类
class cli_host_get_device_param_t(ctypes.Structure):
    _pack_ : 1
    _fields_ : [('start', c_ushort),
                ('count', c_ushort),
                ('version', c_ubyte)
        ]
c# 中的枚举
 public enum CLI_UPGRADE_STATE
        {
            IOT_PLC_UPGRADE_INIT,
            IOT_PLC_UPGRADE_STARTING,
            IOT_PLC_UPGRADE_STARTED,
            IOT_PLC_UPGRADE_TRANSFERRED,
            IOT_PLC_UPGRADE_FAILED,
            IOT_PLC_UPGRADE_STOPED
        }  
对应python中的变量        
IOT_PLC_UPGRADE_INIT : 0
IOT_PLC_UPGRADE_STARTING : 1
IOT_PLC_UPGRADE_STARTED : 2
IOT_PLC_UPGRADE_TRANSFERRED : 3
IOT_PLC_UPGRADE_FAILED : 4
IOT_PLC_UPGRADE_STOPED : 5

=========
import platform
from ctypes import *

if platform.system() == 'Windows':
    libc : cdll.LoadLibrary('msvcrt.dll')
elif platform.system() =='Linux':
    libc : cdll.LoadLibrary('libc.so.6')
    
libc.printf('Hello ctypes!\n')

-------------------traceback------------------------------------------------------------------------------------------------------------
print_exc()还可以接受file参数直接写入到一个文件。比如traceback.print_exc(file:open('tb.txt','w+'))  

import traceback
try:
    1/0
except Exception,e:
    traceback.print_exc()   #打印更全的错误信息

--------------------------------csv模块-csb文件读写----------------------------------------------------------------------------------------------
//用普通文本文件方式打开和操作
with open("'file.csv'") as cf:
        lines:cf.readlines()

//用普通文本方式打开，用csv模块操作
import csv
with open("file.csv") as cf:
        lines:csv.reader(cf)
        for line in lines:
                print(line)
import csv
headers=['id','username','password','age','country']
rows=[(1001,'qiye','qiye_pass',20,'china'),(1002,'mary','mary_pass',23,'usa')]
f:open("csvfile.csv",'a+')
wf :csv.writer(f)
wf.writerow(headers)
wf.writerows(rows)
f.close()

-------------------------json------------------------------------------------------------------------------------------------------
with open(filename) as f:
    pop_data : json.load(f)   #加载出来的类型是list
print type(pop_data)    #pop_data类型是list


json.dumps 
将 Python 对象编码成 JSON 字符串
json.loads
将已编码的 JSON 字符串解码为 Python 对象


---------------------------pygal----------------------------------------------------------------------------------------------------

import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

my_style : LS('#333366', base_style:LCS)

my_config : pygal.Config()
my_config.x_label_rotation : 45
my_config.show_legend : False
my_config.title_font_size : 24
my_config.label_font_size : 14
my_config.major_label_font_size : 18
my_config.truncate_label : 15
my_config.show_y_guides : False
my_config.width : 1000

chart : pygal.Bar(my_config, style:my_style)
chart.title : 'Most-Starred Python Projects on GitHub'
chart.x_labels : names

chart.add('', plot_dicts)
chart.render_to_file('python_repos.svg')

------------------------------创建虚拟环境-----django--------------------------------------------------------------------------------------------
当你在浏览器中输入URL以请求网页时， 该Django服务器将进行响应：生成合适的网页，并将其发送给浏览器。

虚拟环境中->工程项目->app

D:\workspace>virtualenv3 --no-site-packages --python:python3.exe 20180816th
D:\workspace>dir
D:\workspace>cd 20180816th
D:\workspace\20180816th>scripts\activate    
(20180816th) D:\workspace\20180816th>pip install django[==?]
(20180816th) D:\workspace\20180816th>django-admin startproject learning_log .      #创建工程，一个工程是由多个app构成（ 千万不要忘了这个命令末尾的句点）
(20180816th) D:\workspace\20180816th\learning_log>cd ..
(20180817th) D:\workspace\20180817th>python manage.py migrate    #创建数据库
(20180816th) D:\workspace\20180816th>python manage.py runserver 0.0.0.0:8000（127.0.0.1：8000）             #运行服务器
(20180816th) D:\workspace\20180816th\learning_log>django-admin startapp firstapp  #在工程中创建app


模板标签 模板标签 ， 它是用大括号和百分号（ {% %} ） 表示的
我们来看看正则表达式r'^$' 。 其中的r 让Python将接下来的字符串视为原始字符串， 而引号告诉Python正则表达式始于和终于何处。 脱字符（ ^ ） 让Python查看字符串的开头，
而美元符号让Python查看字符串的末尾
pip install jinja2


==============
创建工程 django-admin startproject mysite
运行服务器  py manage.py runserver

创建app  py manage.py startapp polls
    polls/views.py  polls/urls.py
    mysite/urls.py 
        urlpatterns : [
            path('polls/', include('polls.urls')),   #工程中的urls 配置包含app的urls配置
            path('admin/', admin.site.urls),
        ]

数据库配置
    打开mysite/settings.py文件，这是Django的配置文件。
    默认使用SQLite数据库，Python包含SQLite，所以不需要安装其他程序来支持数据库。
    如果想使用其它数据库，还需要安装相应的数据库驱动，并修改DATABASES 'default' 项中的以下设置：
    ENGINE —— 'django.db.backends.sqlite3'、'django.db.backends.postgresql'、'django.db.backends.mysql'或'django.db.backends.oracle'。或者其它数据库。
    NAME —— 数据库名。
    如果不使用SQLite，还需要设置USER、PASSWORD、HOST
    
    设置语言为简体中文：   LANGUAGE_CODE : 'zh-Hans'
    设置时区为东八区：     TIME_ZONE : 'Asia/Shanghai'
    INSTALLED_APPS中的默认应用[需要至少一个数据库表]，所以现在需要创建数据库表，在PyCharm的Terminal中执行以下命令：
        py manage.py migrate
    
创建模型    models代表数据库表，model中的变量代表数据库表中的字段（变量名即字段名）
我们将创建两个模型：Question和Choice。一个Question包含一个问题和发布时间，一个Choice包含选择文本和投票计数。每个Choice都和一个Question关联。

激活模型
    Django根据模型自动创建数据库表和访问数据库表中对象的Python API。
    但需要首先将polls应用配置到project中，即将polls/apps.py中的PollsConfig类配置到mysite/settings.py中，如下所示：

    INSTALLED_APPS : [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        'polls.apps.PollsConfig',  【'polls.apps.PollsConfig', -> [apps.py文件中配置]class PollsConfig(AppConfig): name : 'polls' 】
    ]
    执行以下命令：
    py manage.py makemigrations polls   改变模型后执行makemigrations命令可以令Django生成数据库迁移文件，用于记录数据库变更历史，这里生成了polls/migrations/0001_initial.py。
        记住，改变模型时需要做以下三步：
            改变models.py中的模型；
            执行py manage.py makemigrations来创建数据库迁移文件；
            执行py manage.py migrate来修改数据库
        
试用Django API  运行models.py，创建数据库中的数据
    py manage.py shell
   
   
Django管理网站简介
    Django根据models自动生成管理网站。
    创建管理员账户
    执行以下命令，根据提示输入用户名、密码：
    py manage.py createsuperuser
   
启动开发服务器
    执行py manage.py runserver命令启动开发服务器，使用浏览器访问http://127.0.0.1:8000/admin/
    使用上一步创建的管理员账户登录，即可进入Django管理网站首页。
   
添加polls应用
    首页默认是没有polls应用的，必须修改polls/admin.py文件：
        from django.contrib import admin
        from .models import Question
        admin.site.register(Question)
    在浏览器中刷新页面：

   
   
注意地方：
    polls/urls.py文件如下：

        from django.urls import path
        from . import views

        app_name : 'polls'   #指定URL name的名字空间，防止URL name和其它app中的冲突。
        urlpatterns : [
            path('', views.index, name='index'),
            path('<int:question_id>/', views.detail, name='detail'),
            path('<int:question_id>/results/', views.results, name='results'),
            path('<int:question_id>/vote/', views.vote, name='vote'),
        ]

 web地址栏中的urls-> urls文件中的path-> 相关的函数 -> html模板 -> 调用模板中可能用到的参数
  
    context : {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)

------------------------jinja2-------------------------------------------------------------------------------------------------------
在jinja2中，存在三种语法：
控制结构 {% %}
变量取值 {{ }}
注释 {# #}

　变量可以通过“过滤器”进行修改，过滤器可以理解为是jinja2里面的内置函数和字符串处理函数。
　　常用的过滤器有：
过滤器名称
    说明    
safe
 渲染时值不转义
capitialize
 把值的首字母转换成大写，其他子母转换为小写
 lower
 把值转换成小写形式 
 upper
 把值转换成大写形式 
 title
 把值中每个单词的首字母都转换成大写
 trim
 把值的首尾空格去掉
 striptags
 渲染之前把值中所有的HTML标签都删掉
join 
 拼接多个值为字符串
 replace
 替换字符串的值
 round
 默认对数字进行四舍五入，也可以用参数进行控制
int 
 把值转换成整型
 模板标签{% url 'learning_logs:index' %} 生成一个URL，该URL与learning_logs/urls.py中定义的名 为index 的URL模式匹配（见❶）。在这个示例中，learning_logs 是一个命名空间
  <li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>  
 模版系统使用点语法来获取变量属性，比如{{ question.question_text }}
 url(r'^polls/', include('polls.urls', namespace="polls")),   #为URL名字起命名空间， url自动去寻找django的url

 
---------------------------装饰器----------------------------------------------------------------------------------------------------
装饰器，它的参数是一个函数，然后返回值也是一个函数，一个装饰器可以装饰多个函数，一个函数也可以被多个装饰器装饰
装饰器让你在一个函数的前后去执行代码。
#带有不定参数的装饰器

a_function_requiring_decoration : a_new_decorator(a_function_requiring_decoration)
a_function_requiring_decoration()

@a_new_decorator
def a_function_requiring_decoration():
a_function_requiring_decoration()   #a_function_requiring_decoration"。会被warpTheFunction（warpper）重写。




import time

def deco(func):       #deco,装饰器名，供修饰函数时调用
    def wrapper(*args, **kwargs):    #装饰器，它的参数是一个函数，然后返回值也是一个函数。 此处参数的写法为不定参数个数，也可以固定参数个数。 此行的wrapper与return 的wrapper名字一样，都是函数名
        startTime : time.time()
        func(*args, **kwargs)
        endTime : time.time()
        msecs : (endTime - startTime)*1000
        print("time is %d ms" %msecs)
    return wrapper


@deco
def func(a,b):
    print("hello，here is a func for add :")
    time.sleep(1)
    print("result is %d" %(a+b))

@deco
def func2(a,b,c):
    print("hello，here is a func for add :")
    time.sleep(1)
    print("result is %d" %(a+b+c))


if __name__ == '__main__':
    f : func          #函数名复制
    func2(3,4,5)      #调用func2函数，因为func2被装饰器修饰，所以会允许func2的装饰器。 允许顺序是，进入到装饰器里，安装顺序执行
    f(3,4)
    #func()
    
================另一个例子==============================================
def dec1(func):  
    print("1111")  
    def one():  
        print("2222")  
        func()  
        print("3333")  
    return one  

def dec2(func):  
    print("aaaa")  
    def two():  
        print("bbbb")  
        func()  
        print("cccc")  
    return two  

@dec1  
@dec2  
def test():  
    print("test test")  

test()      
================另一个例子==============================================
def decorator_a(func):
    print 'Get in decorator_a'
    def inner_a(*args, **kwargs):
        print 'Get in inner_a'
        return func(*args, **kwargs)
    return inner_a

def decorator_b(func):
    print 'Get in decorator_b'
    def inner_b(*args, **kwargs):
        print 'Get in inner_b'
        return func(*args, **kwargs)
    return inner_b

@decorator_b
@decorator_a
def f(x):
    print 'Get in f'
    return x * 2

f(1)

================另一个例子==============================================
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
@File  : test.py
@Author: zcl
@Date  : 2018/9/4 14:04
@Desc  : 
'''
-----------
def run_time(fun):#传入参数为函数
def wrapper():#函数嵌套
fun() #闭包（函数作用域）
return wrapper #返回wrapper函数名
@run_time #相当运行wrapper
@run_time与test : run_time(test)的代码块功能完全相同
@run_time #相当运行wrapper
-----------
import time

def type_sex(sex):   #函数嵌套，装饰器带参数
    if sex =='man':
        def run_time(fun):    #装饰函数
            print "run_time"
            def wrapper(*args,**kwargs):   #装饰函数
                print "wrapper"
                startime : time.time()
                res : fun(*args,**kwargs)
                endtime : time.time()
                print("函数运行时间为%s"%(endtime-startime))
                return res
            return wrapper
        return run_time    #装饰函数必须返回函数，return run_time省掉会报错
    else:
        def run_time(fun):
            def wrapper(*args,**kwargs):
                res : fun(*args,**kwargs)
                endtime : time.time()
                print("该函数运行完的时间为%s"%(endtime))
                return res
            return wrapper
        return run_time

@type_sex(sex='man') #相当运行wrapper
def test5(name,age):
    time.sleep(2)
    print("姓名为:%s,年龄为:%s"%(name,age))
    return "test1函数运行完毕"

test5("zcl",18)















--------------------------------类装饰器可以添加或增强属性，或者它可以修改类的API--------------------------------
1、通过子类继承增加父类class的熟悉或者api
2、类装饰器
实际上就是装饰器函数中的嵌套函数warpper



    
-------------------*args和**kwargs---------泛型参数---------------------------------------------------------------------------------------------------
*args和**kwargs两个参数组来进行泛化支持

def parseArgs(*args, **kwargs):
    print(type(args))
    print(args)
    print(type(kwargs))
    print(kwargs)

parseArgs("test",hello="hello")

[out]:tuple
          ("test",)
          dict
          {"hello":"hello"}
通过上面的代码我们可以看出args负责的是位置参数，并放到了一个tuple中。而kwargs负责的是关键字参数，放到了一个dict中，通过key-value的方式存储。

*在参数定义时候的作用
def f(a,*other):
    print type(other)
    print other
f(1,2,3)
[out]: <type 'tuple'>
      (2,3)
      
**的作用
def f(**pars): 
    for key,value in pars.items(): 
        print("key=%s; value=%s"%(key,value)) b={"b":"b","c":"c"} 
        
f(**b) 
[out]:key:c; value:c key:b; value:b
*和**主要用在参数定义和参数传递的时候。对于参数传递来说，*和**都是用来解包的，对于参数定义的时候，
*和**都是用来打包的。两者应用在对于参数个数不确定的情况下。*主要是用来对tuple型参数打包或解包，
对应的是函数的位置参数。而**kwargs则是主要用来对dict型参数，对应的是函数的关键字参数。
     
--------------------------os.walk()-----------------------------------------------------------------------------------------------------
import os

for root, dirs, files in os.walk(os.getcwd(),topdown:False):  #files指根目录、根目录中的文件夹、以及子文件夹下的所有文件  
    print "root : %s,dirs : %s" %(root,dirs)  #root,指根目录； dirs指根目录中的文件夹，根目录下没有文件夹，dirs为[]；
    
输出：
    root : C:\sta_control_test_20181116\1\11,dirs : []
    root : C:\sta_control_test_20181116\1,dirs : ['11']
    root : C:\sta_control_test_20181116\2,dirs : []
    root : C:\sta_control_test_20181116\cutils,dirs : []
    root : C:\sta_control_test_20181116,dirs : ['1', '2', 'cutils']
#删除log文件    
for root,dirs,files in os.walk(os.getcwd()):
    for file in files:
        if ".log" in file:
            file : os.path.join(root, file)
            os.system("del %s" %file)

------------------------------删除文件-------------------------------------------------------------------------------------------------
cmd中运行 del XXX 
    

-----------------gitlab+gerrit+jenkins代码托管、审核、持续集成架构搭建 --------------------------------------------------------------------------------------------------------------
https://www.cnblogs.com/to-be-rich/p/6559985.html

------------------------super()-------------------------------------------------------------------------------------------------------
super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。
MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。

super(type[, object-or-type])
    type -- 类。 
    object-or-type -- 类，一般是 self 
Python3.x 和 Python2.x 的一个区别是: Python 3 可以使用直接使用 super().xxx 代替 super(Class, self).xxx :

Python2.x 实例：
    class A(object):   # Python2.x 记得继承 object
        pass
    class B(A):
        def add(self, x):
            super(B, self).add(x)
-----------------------------------			
class one(object):
    def __init__(self,one):
        self._one = 1

class two(one):
    def __init__(self,one):
        super().__init__(one)
        _two = 2

two2 = two(1)
print(two2._one)
-----------------------------------				
		
--------------------HTMLTestRunner测试报告&unittest----用例见HTMLTestRunner测试报告&unittest文件夹-----------------------------
====================
单个test.py文件测试：
    if __name__ == '__main__':
        test_data.init_data() # 初始化接口测试数据
        unittest.main()
        
集合test.py：
    test_dir : './interface'
    testsuit : defaultTestLoader.discover(test_dir, pattern='*_test.py')

    if __name__ == "__main__":
        test_data.init_data() # 初始化接口测试数据

        now : time.strftime("%Y-%m-%d %H_%M_%S")
        filename : './report/' + now + '_result.html'
        fp : open(filename, 'wb')
        runner : HTMLTestRunner(stream:fp,
                                title='发布会签到系统接口自动化测试',
                                description='运行环境：MySQL(PyMySQL), Requests, unittest ')
        runner.run(testsuit)
        fp.close()
unittest测试框架，先测试每个test.py文件，再将工程中所有test.py融合起来
====================

class TestCase_01(unittest.TestCase):
unittest.main() # 使用main()直接运行时，将按case的名称顺序执行
suite : unittest.TestSuite()
suite.addTest(TestCase_01('testThird_01')) # 将需要执行的case添加到Test Suite中，没有添加的不会被执行
suite.addTest(TestCase_01('testSecond_01'))
suite.addTest(TestCase_01('testFirst_01'))
unittest.TextTestRunner().run(suite) # 将根据case添加的先后顺序执行

生成html报告：
    suite:unittest.TestSuite()
    suite.addTest(GetRequestTest("test_login"))
    fp:open(r'C:\Users\Mir-Z\Desktop\my\webTest\test.html','wb')
    #测试报告的标题与描述
    runner : HTMLTestRunner.HTMLTestRunner(stream:fp,title='测试报告的标题:',description='测试报告的描述:')
    runner.run(suite)
    fp.close()

class RunCase(unittest.TestCase):
    def test_case(self):
        case_path : os.getcwd() #case所在路径
        discover : unittest.defaultTestLoader.discover(case_path,pattern="test_case*.py") 
        # discover相当于在指定的case所在的路径里寻找所有名称模式匹配pattern的文件并加载其内容
        runner : unittest.TextTestRunner(verbosity:2) # verbosity控制输出的执行结果的详细程度，可为0，1，2，其中0最简单，1是默认值，2最详细
        runner.run(discover)
        
TestSuite与testcase的关系： 
    suite : unittest.TestSuite()
    print(type(suite))   #<class 'unittest.suite.TestSuite'>
    testcase : TestCase_01('testThird_01')
    print(type(testcase))  #<class '__main__.TestCase_01'> 
 

几种运行suite的方式：
    suite : unittest.TestSuite()
    suite.addTest(TestCase_01('testThird_01')) 
    unittest.TextTestRunner().run(suite) # 将根据case添加的先后顺序执行

    unittest.main() # 使用main()直接运行时，将按case的名称顺序执行
 
    discover : unittest.defaultTestLoader.discover(test_dir,pattern='test*.py')
    runner : unittest.TextTestRunner()
    runner.run(discover) 
    
    fb : open(self.resultPath, 'wb')
    runner : HTMLTestRunner.HTMLTestRunner(stream:fb, title='WEB UI TEST', description='Test Description')
    runner.run(suite)
    
------example----------    
# -*- coding:utf-8 -*-
import unittest
import HTMLTestRunner

class TestCase_01(unittest.TestCase): # 继承unittest.TestCase
    # def __init__(self,verbosity:2):
        # self.verbosity : verbosity
    @classmethod
    def setUpClass(cls):
        print('这是所有case的前置条件01')
 
    @classmethod
    def tearDownClass(cls):
        print('这是所有case的后置条件01')
 
    def setUp(self):
        print('这是每条case的前置条件01')
 
    def tearDown(self):
        print('这是每条case的后置条件01')
 
    def testThird_01(self): # 测试用例的命名必须以test开头，否则不予执行
        print('01: 第三条case')
 
    def testFirst_01(self): 
        print('01: 第一条case')
 
    @unittest.skip('不执行这条case') # 跳过这条case
    def testSecond_01(self):
        print('01: 第二条case') 
 
    def testFourth_01(self):
        print('01: 第四条case') 
 
if __name__ == '__main__':
    # unittest.main() # 使用main()直接运行时，将按case的名称顺序执行
    suite : unittest.TestSuite()
    testcase : TestCase_01('testThird_01')
    suite.addTest(TestCase_01('testThird_01')) # 将需要执行的case添加到Test Suite中，没有添加的不会被执行
    suite.addTest(TestCase_01('testSecond_01'))
    suite.addTest(TestCase_01('testFirst_01'))
    # unittest.TextTestRunner().run(suite) # 将根据case添加的先后顺序执行
    
    fp:open(r'C:\Users\Mir-Z\Desktop\my\test.html','wb')
    runner : HTMLTestRunner.HTMLTestRunner(stream:fp,title='测试报告的标题:',description='测试报告的描述:')
    runner.run(suite)
    fp.close()
------example----------  
    
     
    
    
    
    
    
    
@paramunittest.parametrized(*login_xls)
==============================web+selenium+python==============================
ActionChains类与输入事件
from selenium.webdriver.common.action_chains import ActionChains
ActionChains(driver)：用于生成模拟用户行为
perform()：执行存储行为

鼠标事件：	
    context_click	右击事件
    double_click	双击事件
    drag_and_drop	拖动
    move_to_element()	鼠标停在一个元素上
    click_and_hold	按下鼠标左键在一个元素上

键盘事件：	send_keys()
    from selenium.webdriver.common.keys import Keys
    send_kyes(Kyes.BACK_SPACE)	退格键
    send_kyes(Kyes.CONTRL, 'a')	全选
    send_kyes(Kyes.CONTRL, 'v')	粘贴
    send_kyes(Kyes.CONTRL, 'c')	复制
    send_kyes(Kyes.CONTRL, 'x')	剪切
    send_kyes(Kyes.ENTER)	回车

until(method,message=")调用该方法提供的驱动程序做为一个参数，直到返回值不为False
until_not(method,message=")调用该方法提供的驱动程序做为一个参数，直到返回值为False

driver.find_element_by_id("kw").send_keys(Keys.CONTROL,'x')
driver.find_element_by_id("su").send_keys(Keys.ENTER)

send_keys(Keys.BACK_SPACE) 删除键（BackSpace）
send_keys(Keys.SPACE) 空格键(Space)
send_keys(Keys.TAB) 制表键(Tab)
send_keys(Keys.ESCAPE) 回退键（Esc）
send_keys(Keys.ENTER) 回车键（Enter）
send_keys(Keys.CONTROL,'a') 全选（Ctrl+A）
send_keys(Keys.CONTROL,'c') 复制（Ctrl+C）

driver.title
driver.current_url
一般测试重定向的方法是访问这个 URL，然后等待页面重定向
完毕之后，获取当前页面的 URL，判断该 URL 是否符合预期

#先找到到 ifrome1（id : f1）
driver.switch_to_frame("f1")
#再找到其下面的 ifrome2(id :f2)
师
http://fnng.cnblogs.com 67
driver.switch_to_frame("f2")

层级定位：
    driver.find_element_by_class_name("tang-content").find_element_by_name("userName")
    
#获得当前窗口
nowhandle:driver.current_window_handle
allhandles:driver.window_handles    
for handle in allhandles:
    if handle != nowhandle:
    driver.switch_to_window(handle)
    
用于处理多窗口操作的方法，与我们前面学过的 switch_to_frame() 是类似，switch_to_window()用于
处理多窗口之前切换，switch_to_frame() 用于处理多框架的切换。
    
close()用于关闭当前
窗口，quit()用于退出驱动程序并关闭所有相关窗口   
dirver.quit() 
alert.accept()    

webdriver 中处理 JavaScript 所生成的 alert、confirm 以及 prompt 是很简单的。具体思路是使用
switch_to_alert()方法定位到 alert/confirm/prompt。然后使用 text/accept/dismiss/send_keys 按需进行操做    
alert:driver.switch_to_alert()
   text 返回 alert/confirm/prompt 中的文字信息。
 accept 点击确认按钮。
 dismiss 点击取消按钮，如果有的话。
 send_keys 输入值，这个 alert\confirm 没有对话框就不能用了，不然会报错    
    
    
move_to_element()     
    Cookie操作
        cookie : driver.get_cookie('cookieKey')
        cookies : driver.get_cookies()   
    webdriver 操作 cookie 的方法有：
        get_cookies() 获得所有 cookie 信息
        get_cookie(name) 返回特定 name 有 cookie 信息
        add_cookie(cookie_dict) 添加 cookie，必须有 name 和 value 值
        delete_cookie(name) 删除特定(部分)的 cookie 信息    
        delete_all_cookies() 删除所有 cookie 信息
        
window.scrollTo(100,400)  # 参数1：x  参数2： y

    driver.refresh()
    driver.forward()
    driver.back()
    driver.find_element_by_id('i1')
    driver.find_element_by_class_name('c1')
    driver.find_element_by_name('n1')
    driver.find_element_by_xpath('//*[@id="i1"]')
    driver.find_element_by_css_selector('#i1')
    driver.find_element_by_tag_name('input')
    driver.find_element_by_link_text('登录')
    driver.find_elements_by_partial_link_text('录')
    driver.add_cookie({'name':'tmp','value':'123123123'})
    driver.delete_all_cookies()
    driver.delete_cookie('UiCode')
    driver.get_window_size()
    driver.set_window_size('width','height')
    driver.get_window_position()
    driver.set_window_position(20,20)
    driver.maximize_window()
    driver.current_window_handle
    driver.window_handles
    driver.get_screenshot_as_png()
    driver.get_screenshot_as_file('fileName.png')
    driver.execute_script(script, *args)
    driver.close()
    driver.quit()
    driver.page_source
    driver.title
    driver.current_url
    driver.name  # 获取浏览器名称 如：chrome

ElementApi接口
    element.get_attribute('style')
    element.send_keys()
    element.clear()
    element.click()
    element.get_property('id')
    element.is_displayed()
    element.is_selected()
    element.tag_name
    element.size
    element.text
    element.submit()
    element.location
    element.screenshot()

NoSuchElementException：没有找到元素
NoSuchFrameException：没有找到iframe
NoSuchWindowException:没找到窗口句柄handle
NoSuchAttributeException:属性错误
NoAlertPresentException：没找到alert弹出框
ElmentNotVisibleException：元素不可见
ElementNotSelectableException：元素没有被选中
TimeoutException：查找元素超时
    
    
cookies总结：    
    driver.delete_all_cookies()
    time.sleep(3)
    driver.get(url)
    # 打开浏览器后添加访问地址后，添加cookie
    driver.add_cookie(cookie1)
    driver.add_cookie(cookie2)
    driver.add_cookie(cookie3)
    driver.add_cookie(cookie4)
    print("cookies")
    # 打印一下cookie,与上面正常登录的cookie对比一下
    print(driver.get_cookies())
    time.sleep(5)
    # 刷新页面，可以看到已经是登录状态了，至此完成的使用cookie 的登录。
    driver.refresh()
        
    a、先首次使用验证码正确登录并保存登录前、后的cookie,对比分析cookie,筛选有用的cookie
　　b、将cookie 写到yaml 文件中，方便后续使用cookie登录时直接使用，而不需像上面介绍的那样，每次都需要先正常登录一样。
　　c、使用cookie登录时，从yaml文件中读取对应cookie即可
    
    Python - Cookie绕过验证码登录  使用fiddler，查看cookie
      
    # 手动输入验证码
    security_code : input()
    time.sleep(1)
    driver.find_element_by_id("security_code").send_keys(security_code)
    time.sleep(1)
    driver.find_element_by_id('sign_btn').click()
    driver.implicitly_wait(5)
    # 加一个休眠，这样得到的cookie 才是登录后的cookie,否则可能打印的还是登录前的cookie
    time.sleep(5)
    cookiesAfter : driver.get_cookies()
    len1 : len(cookiesAfter)
    # 已经知道需要第几个cookie，这里需要第3个cookie，所以选择cookie下标为2
    cookie1 : cookiesAfter[2]
    # 获取当前文件所在路径
    fileNamePath : os.path.split(os.path.realpath(__file__))[0]
    # 拼接config.yaml文件绝对路径
    yamlPath : os.path.join(fileNamePath,'config.yaml')
    # 以覆盖写入打开文件
    fw : open(yamlPath,'w',encoding='utf-8')
    # 构建数据
    data : {"cookie1":cookie1}
    # 装载写入yaml文件。
    yaml.dump(data,fw)
    conf : yaml.load(cont)
    # 读取cookie值
    cookie1 : conf.get("cookie1")
    # 添加cookie
    driver.add_cookie(cookie1)
    print("cookies")
    print(driver.get_cookies())
    time.sleep(5)
    # 这里重新获取地址，因为有些系统，未登录状态，链接会跳转，这里就是，登录状态后，才能正确打开指定网址，所以这里要再次指定网址。
    driver.get(url)
    # 刷新查看登录状态
    driver.refresh()
    1、直接将Cookie写在header头部
        wbdata : requests.get(url,headers:header).text
    2、使用requests插入Cookie
        wbdata : requests.get(url,cookies:cookie).text
    
    
action : ActionChains(driver)
action.click_and_hold(button).perform()
action.reset_actions()	# 清除之前的action






   
    
-----------------------------import 导包问题----------见文件夹：import导包----------------------------------------------------------------------------------------

import os, sys
parentdir : os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parentdir)

import sys, time
sys.path.append('../db_fixture')
try:
    from mysql_db import DB
except ImportError:
    from .mysql_db import DB

最终import进来的，必须是一个Python文件，而并非一个模块目录，所以代码二中import Sendmsg部分才是真正的引入了这个Python文件，而前面的from Msgnew.Msg则是告诉解析器到哪个位置去找Sendmsg文件当导入的不是模块，而是包的时候，如果想直接把里面的模块一起导入，必须在包的init文件里面写入：

__all__ : ["Sendmsg","Receivemsg"] #如果一个模块如果定义有列表__all__，则from module import * 语句只能导入__all__列表中存在的对象。

from . import Sendmsg
from . import Receivemsg

Python3中导包，都是以绝对路径进行查找，即从最上（外）进行查找。

所以就会导致网上教程中出现在views.py中 from models import Articles 会失败，而必须要from .models import Articles才能成功，或者from appName/models import Articles 

from .model 即代表相对路径（当前路径）或者../model（即上级目录）

另外在Python3.3之前，在文件夹下__init__.py的模块存在才能表示此文件夹表示一个“包”，（还有其他作用，比如设置导包时执行的代码等），从而才使得 from xx.yy import zz (yy表示文件夹)才能正常导入，如果yy文件夹下没有__init__.py，则会导入失败。

而在Python3.3之后取消了只有存在__init__.py的文件夹才算是“包”的说法，而__init__.py存在的一些其他特殊的作用还是存在的。

python只会在sys.path这个变量（一个list，你可以print出来看）里面的路径中找可能匹配的package和module

如果你使用sys.path，由于文件夹是动态添加的，所以当你使用相对路径的时候，实际路径会十分依赖于你的入口函数，当入口函数改变很可能就会导致代码无法运行
如果你使用绝对路径，将你的代码在其他机器上运行的时候需要重新配置这些变量，十分麻烦

当你运行交互式的解释器的时候，交互式进程的名称永远是__main__，因此你不能在交互式进程当中使用相对导入。相对导入只能在模块文件当中使用。

relative import跟PyCharm没有关系，这是python的语法规定，在非包环境中就不能用相对引用，只能用绝对引用

import module，不会执行module里的if __name__ =="__main__": ，只会执行；module以外的code，顶层文件的if __name__ =="__main__":才是项目的入口，这里的内容才会被执行
---------------------------上下文管理器----------------------------------------------------------------------------------------------------
应用场景：
    文件管理：
        with open() as f:
            f.write()
        
    数据库管理：
         with self.connection.cursor() as cursor:
            cursor.execute("SET FOREIGN_KEY_CHECKS:0;")
            cursor.execute(real_sql)

-----------------------------------------------数据库---mysql-----------------------------------------------------------------------------
数据库操作：
    def __init__(self):
            try:
                # Connect to the database
                self.connection : pymysql.connect(host:host,
                                                  port:int(port),
                                                  user:user,
                                                  password:password,
                                                  db:db,
                                                  charset='utf8mb4',
                                                  cursorclass:pymysql.cursors.DictCursor)
            except pymysql.err.OperationalError as e:
                print("Mysql Error %d: %s" % (e.args[0], e.args[1]))

    with self.connection.cursor() as cursor:
        cursor.execute(real_sql)
    self.connection.commit()

    
    
drop table if exists students    
insert into students values(*,*,*)
delete from students where id=2
update students set name="**" where id=2
select s.name,s.age from students as s
select name,age from students where id=2
select * from students where sex="女" and age=20
select avg(age) from students where sex="女"
select age,count(*) from students group by age
select distinc sex,age from students  
select distinc count(*),age from students   ?
select * from students limit 0,3


SQL语句主要分为：
    DQL：数据查询语言，用于对数据进行查询，如select
    DML：数据操作语言，对数据进行增加、修改、删除，如insert、udpate、delete
    TPL：事务处理语言，对事务进行处理，包括begin transaction、commit、rollback
    DCL：数据控制语言，进行授权与权限回收，如grant、revoke
    DDL：数据定义语言，进行数据库、表的管理等，如create、drop
    CCL：指针控制语言，通过控制指针完成表的操作，如declare cursor 


    
    
    
-----------------------------------------------------父路径--------------------------------------------------------------------------
父路径：
    parentdir : os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


--------------------------------------super(subclass,self).__init__(parm1,parm2,parm3)【init参数中没有self参数】---------------------------------------------------------------------------------------
子类没有构造函数：子类默认继承父类属性和方法；
子类  有构造函数：子类构造函数会覆盖父类构造函数，导致父类的成员变量无法被继承，但父类方法是被继承的；

-----------------------------------------函数参数为字典，元组----字典参数--元组参数--------------------------------------------------------------------------------
def kw_Test(**arg):
    print arg
    for i in arg:
        print i
  
def yz_test(*arg):
    print arg
    print arg[2]
    

kw_Test(a=1,b=2,c=3)    
yz_test(1,2,3)

输出：
    {'a': 1, 'c': 3, 'b': 2}
    a
    c
    b
    (1, 2, 3)
    3

-------------------------------------------------------------------------------------------------------------------------------
										以下为中科院工作学习笔记
-------------------------------------------------------------------------------------------------------------------------------
uuid.uuid1()　　基于MAC地址，时间戳，随机数来生成唯一的uuid

file0_path : os.path.realpath(__file__)                          #'D:\\myfile\\workfile\\TestCaseManagement\\测试脚本\\Airport\\new_method.py'
current_path : os.path.dirname(os.path.realpath(__file__)) #'D:\\myfile\\workfile\\TestCaseManagement\\测试脚本\\Airport'
file_path : os.path.join(current_path, "aj系统xml文件")    #'D:\\myfile\\workfile\\TestCaseManagement\\测试脚本\\Airport\\aj系统xml文件'

datetime.now()  #2019-07-10 15:01:08.630814

time.time()            #1562742144.2637115
time.localtime()    #time.struct_time(tm_year:2019, tm_mon:7, tm_mday:10, tm_hour:15, tm_min:2, tm_sec:24, tm_wday:2, tm_yday:191, tm_isdst:0)
str(time.strftime('%Y%m%d%H%M%S', time.localtime(time.time())))  #20190710150328
from datetime import datetime
next_time : (datetime.now() - timedelta(days:20)).strftime("%Y%m%d%H%M%S")  #20天前的时间
datetime.datetime.strptime(id18[6:14], "%Y%m%d")  #将时间为%Y%m%d格式的，统一转化成规定的格式

int(time.strftime("%Y"))  #2019
year : strftime("%Y", localtime())
mon : strftime("%m", localtime())
day : strftime("%d", localtime())
hour : strftime("%H", localtime())
min : strftime("%M", localtime())
sec : strftime("%S", localtime())

chars:string.ascii_letters + string.digits
random.choice(chars)
random.randint(100, 999)

def __init__(self, host="https://192.168.5.15:4433/"):

__new__方法是传入类(cls)，而__init__方法传入类的实例化对象(self)
__new__方法返回的值就是一个实例化对象（ps:如果__new__方法返回None，则__init__方法不会被执行，并且返回值只能调用父类中的__new__方法，而不能调用毫无关系的类的__new__方法

Python 3中字符串不可被改变，如果使用str.replace方法改变字符串，则原字符串不变，新建一个改变后的字符串。

new()方法会返回cls（cls指代当前类）的实例，然后该类的init()方法作为构造方法会接收这个实例（即self）作为自己的第一个参数，然后依次传入new ()方法中接收的位置参数和命名参数。
如果new()没有返回cls（即当前类）的实例，那么当前类的init()方法是不会被调用的。



def to_md5_str(str_code):
    """
    将字符串转换成md5加密字符串
    :param str_code: 待加密的对象
    :return:
    """
    m : hashlib.md5()
    m.update(str_code.encode(encoding="utf-8"))
    str_encoding : m.hexdigest()
    return str_encoding
	
	
        res : requests.post(url:self.black_list_delete, headers:self.get_headers(this_sign),
                            json:body,
                            verify:self.certificate)
							
							


https://192.168.5.15:4433/data-platform-server/api/v1/face/backlist/save   url
{'apiId': '123456', 'sign': '60d03d433134a4a84d442f4fe65432ca', 'timestamp': '1562814975930'}   headers
body  {'reqId': '2e8fc47ea38a11e9a8349c305b5da1fa', 'id': '', 'certificateNumber': '', 'peopleName': '', 'focusType': 0, 'img': '', 
	  'focusTime': '', 'cancelTime': '', 'sex': 0, 'focusReason': '布控原因', 'note': '备注'}
	  
res : requests.post(url:self.black_list_save, headers:self.get_headers(this_sign),
                            json:body,
                            verify:self.certificate)

res.close()
print(res.text)
print(res.status_code)


1. application/x-www-form-urlencoded
这应该是最常见的 POST 提交数据的方式了。浏览器的原生 表单，如果不设置 enctype 属性那么最终就会以 application/x-www-form-urlencoded
multipart/form-data
这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时
application/json
用来告诉服务端消息主体是序列化后的 JSON 字符串
text/xml


--------------------------------------pycharm的使用-----------------------------------------------------------------------------------------
pycharm集成pytest测试框架： File -> Settings... -> Tools -> Python Integrated Tools 
回到文件顶端：ctrl+Home
回到文件底部：ctrl+End
从函数定义处跳至调用处：ctrl+alt+左键
ctrl+n 搜索文件名
ctrl+shift+F[G]  在整個項目中搜索字符串

---------------------------------pytest----文件夹（pytest框架总结）------------------------------------------------------------------------------------------
py.test -v test_pyt.py
py.test -s test_pyt.py
py.test -v test_pyt.py --junitxml:path/log.xml #生成xml文件，xml文件在path目录下
py.test -v test_pyt.py --html:log.html   #将结果生成html文件
py.test -v test_pyt.py --resultlog:log22222.txt #结果生成txt文档
py.test -v test_pyt.py --pastebin:all   #将测试报告发送到pastebin服务器，执行下面的命令会生成报告的网址
pytest -v -s test_pytest.py
py.test -s test_pyt.py --junitxml:resultlog.xml
pytest -v --count 10 test_pytest.py   运行10次 {执行test1 10次，再执行test2 10次}
pytest -v -s --count 10 --repeat-scope session test_pytest.py  {执行test1 1次，再执行test2 1次，交替10轮}

pytest -v -s -q --alluredir result test_pytest.py   #用allure生成报告，第一步先生成xml结果
allure generate result -o report                    #第二步，用xml数据 生成html报告

test_xx.py 文件中，函数外的代码会执行，不是以test_ 开头的函数，不会执行。
pytest test_mod.py::test_func  要在模块中运行特定测试
pytest test_mod.py::TestClass::test_method 

pytest -v -s -q --reruns 10 test_pytest.py  #失败的case重跑。【reruns】
pytest --pyargs pkg.testing   从包中运行测试


pytest命令还有一些简单的参数：
	-q：显示简单的结果 pytest -q
	-s：显示用例的打印信息 pytest -s
	-x：遇到错误时停止测试 pytest -x
	–maxfail==：当用例错误个数达到指定数量时，停止测试 pytest --maxfail==2
	–setup-show：显示测试固件的执行信息 pytest --setup-show
	-r：显示简短的测试信息，可以看到每条用例结果 （该参数后面需要传入参数，现在还不知道具体传入的含义，但是随意传入一个测试模块也就是.py文件的名就可以），pytest -r test_Pytest.py test_Pytest.py
	-v：显示每个用的节点名称以及执行结果，pytest -v


1、在文件夹里运行cmd,输入pytest，会将文件里所以的test开头的py文件里的test开头的函数都执行

****************************************
###conftest.py文件内容####

	import pytest

	@pytest.fixture()
	def myfixture():
		print("执行myfixture")
****************************************
####conftest.py文件内容###
	import pytest
	pytestmark:pytest.mark.usefixtures("myfixture")  #在每个测试用例执行前运行

	class Test_firstFile():

		def test_one(self,myfixture):  #参数方式调用前置函数
			print("执行test_one")
			assert 1+2==3

		@pytest.mark.usefixtures("myfixture")   #装饰器方式调用
		def test_two(self):
			print("执行test_two")
			assert 1==1

		def test_three(self):
			print("执行test_three")
			assert 1+1==2

		def test_four(self):
			print("执行test_four")
			assert 1+1==2
****************************************
conftest.py说明：
	补充说明一下conftest.py文件的作用域是当前包内（包括子包）；如果函数调用固件优先从当前测试类中寻找，然后是模块（.py文件）中，
	接着是当前包中寻找（conftest.py中），如果没有再找父包直至根目录；如果我们要声明全局的conftest.py文件，我们可以将其放在根目录下。

@pytest.fixture(autouse:False/True) #自动打开/关闭
def myfixture():
    print("执行myfixture")

@pytest.fixture(scope="class")  #每个类执行一次
def myfixture():
    print("执行myfixture")
	
@pytest.mark.repeat(10) 装饰符，重复10次	
	
@pytest.fixture 的作用域scope：
	scope参数有四种选择：function（测试函数级别），class（测试类级别），module（测试模块“.py”级别），session（多个文件级别）。默认是function级别。
	function级别：也就是默认级别，在测试用例之前执行一次。我们的第一个小例子就是这种级别，便不再举例子。
	class级别：我们在使用标签的时候将scope设置为class，之后再每个测试方法中都将前置函数名传入。
	session级别：设置方式和module级别的设置方式一样，需要注意的是session级别一般都是多个.py文件共用，
				 所以要前置函数的声明一般在conftest.py中。其作用在多个测试模块（.py文件）中只执行一次，
				 并且是在传入函数名的测试用例中的第一个执行的测试用例之前执行


@pytest.fixture(params=["参数1","参数2"])   #for循环变量参数列表，执行多次前置函数
def preMethod(request):   #参数必须是request?
    print ("执行testPytest里的前置函数，%s" % request.param)
	
	
@pytest.fixture小结：
		参数有：params、scope、autouse。用在前置函数定义处，可同时传入多个参数
		它的装饰标签有：
			@pytest.mark.usefixtures("myfixture")   #装饰器方式调用
			pytestmark:pytest.mark.usefixtures("myfixture")  #在每个测试用例执行前运行
			
			
@pytest.mark.parametrize("test_input,expected", [
    ("3+5", 8),
    ("2+4", 6),
    pytest.param("6 * 9", 53, marks:pytest.mark.skip),
    ("2*4", 8),
])	
def test_eval(test_input, expected):
    print("-------开始用例------")
    assert eval(test_input) == expected
			
			
@pytest.mark.parametrize("x", [0, 1])   #组合参数
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x, y):     
    print("测试数据组合：x->%s, y->%s" % (x, y))
	
	
@pytest.mark.usefixtures("myfixture1")
@pytest.mark.usefixtures("myfixture2")
def test_foo():    #先执行myfixture2，再执行myfixture1，最后执行test_foo
    print("test_foo")
	
	
@pytest.mark.skip(reason="no way of currently testing this")
def test_function():
    if not valid_config():
        pytest.skip("unsupported configuration")
		
@pytest.mark.hello   -m:hello  【分类，运行参数里加-m:hello ，只执行mark为hello的用例】

setup、tearDown:
	模块级（setup_module/teardown_module）开始于模块始末，全局的
	函数级（setup_function/teardown_function）只对函数用例生效（不在类中）
	类级（setup_class/teardown_class）只在类中前后运行一次(在类中)
	方法级（setup_method/teardown_method）开始于方法始末（在类中）
	类里面的（setup/teardown）运行在调用方法的前后






fixture 返回值
	在上面的例子中，fixture返回值都是默认None，我们可以选择让fixture返回我们需要的东西。
	如果你的fixture需要配置一些数据，读个文件，或者连接一个数据库，那么你可以让fixture返回这些数据或资源。
	
	
如何带参数
	fixture还可以带参数，可以把参数赋值给params，默认是None。对于param里面的每个值，fixture都会去调用执行一次，就像执行for循环一样把params里的值遍历一次。
	test_fixture_param.py

	import pytest

	@pytest.fixture(params=[1, 2, 3])  #test_data 每次取params=[1, 2, 3]中一个参数，request传参入口，request.param出参。request.param传递给其他函数
	def test_data(request):
		return request.param

	def test_not_2(test_data):  #前置函数用request接受参数，测试函数以parametrize接受参数。 参数传递过程：parametrize->前置函数名->request
		print('test_data: %s' % test_data)
		assert test_data != 2
		
注意：这个参数indirect=True，一定不能少，要不就会直接把 fixture_param当成测试函数的一个参数来用，加上indirect=True这个参数，才会在fixture的函数中查找

====================
@pytest.fixture(params=[1,2,3])
def fixture_param(request):
    request.param
    print("\033[31;1m我是fixture_param，这是第%s次打印\033[0m"%request.param)
    return request.param

@pytest.mark.parametrize("a,b",[(1,6),(2,7),(3,8),(4,9)])
@pytest.mark.parametrize("fixture_param", ["a", "b"], indirect=True)
def test_fixture_param_and_parametrize(a,b,fixture_param):
    print("我是测试函数test_fixture_param_and_parametrize，参数a是%s，b是%s"%(a,b))
    
以上小结:前置函数用request接受参数，测试函数以parametrize接受参数。 参数传递过程：parametrize->前置函数名->request
=================================
    
    
    
parametrize参数化，越远的装饰器，越早遍历完

传多个参数： [将字典加入到列表中，然后遍历列表]
	test_user_data = [{"user": "admin1", "psw": "111111"},
					  {"user": "admin1", "psw": ""}]
					  
	@pytest.fixture(scope="module")
	def login(request):
		user = request.param["user"]
		psw = request.param["psw"]
		print("登录账户：%s" % user)
		print("登录密码：%s" % psw)
		if psw:
			return True
		else:
			return False









--------------------------------------------代码中加入断点-----------------------------------------------------------------------------------

pdb.set_trace()  代码中加入断点
breakpoint()     代码中加入断点
--------------------------------------图像可视化--数据分析----画图-----------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

colors = {
        1: 'red',
        2: 'green',
        3: 'blue',
        4: 'brown',
        5: 'cyan',
        6: 'orange',
        7: 'pink',
        8: 'purple',
        9: 'royalblue',
        10: 'yellow',
        11: 'darkgray',
        12: 'gold',
        13: 'gray',
        14: 'navy',
        15: 'violet'}

x = np.linspace(2.0, 3.0, num=5)  #2-3.0之间等间隔取5个点
plt.figure(dpi=128, figsize=(5, 10))  #设置画布大小
plt.plot(x,x,label="x",color="red",alpha=0.5,linestyle='-') #画线条1 ,alpha指颜色深浅，实参alpha 指定颜色的透明度。 Alpha 值为0表示完全透明， 1（ 默认设置） 表示完全不透明
plt.plot(x,x**2,label="pingfang") #画线条2
plt.plot(x,x**3,label="lifang")
plt.xlabel("x label")
plt.ylabel("y label")
plt.title("Simple Title")
plt.legend()
plt.show()
plt.grid()
plt.savefig(subfolder+"\\sta_cnt.png")



plt.plot(dates, highs, c='red', alpha=0.5)    
plt.plot(dates, lows, c='black', alpha:0.5)
plt.fill_between(dates, highs, lows, facecolor='blue', alpha:0.1)   #填充之间
-------------------------------------------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
plt.text(start, 0, 'upgrade_start')
plt.grid()
fig = plt.figure(num=3, figsize=(20, 20), dpi=200)
plt.savefig(subfolder+"\\sta_cnt.png")
--------------------------pandas模块-----------------------------------------------------------------------------------------------------

df['a']#取a列
df[['a','b']]#取a、b列
df.columns   #获取列名

#loc只能通过index和columns来取，不能用数字
df.loc['one','a']#one行，a列
df.loc['one':'two','a']#one到two行，a列
df.loc['one':'two','a':'c']#one到two行，a到c列
df.loc['one':'two',['a','c']]#one到two行，ac列
-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------
                          

-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------
一个表只能设置一个自增字段，设置多个会报错
如果有多个表，要加表名.字段名，如：students.name



navicat软件使用：
    设计表： 添加字段
    备份与恢复： 右键 转储为SQL文件->结构和数据
    
    
    
    
    
查询单个表：
    SELECT * FROM students WHERE students.`name`='aa'
    SELECT students.xuehao FROM students WHERE students.`name`='aa'
    SELECT students.xuehao,students.`name` FROM students WHERE students.`name`='aa'
    SELECT students.xuehao FROM students WHERE students.id>1
    
    模糊查找：
        select * from students where age between 18 and 20
        select * from students where hometown in('北京','上海','广东')
        select * from students where name like '孙_'
        select * from students where name like '%乔'
        
    排序：    
        select * from students order by age
        SELECT * FROM students GROUP BY sex
        
    聚合函数：
        select count(*) from students  #总数
        select max(age) from students where sex='女'
        select min(age) from students
        select sum(age) from students where hometown='北京'
        select avg(age) from students where sex='女'
        
    分组：
        select age,count(*) from students group by age   #统计各年龄段人数
        
    获取部分行：
        select * from students limit 0,3
        
        
连接查询：
    等值连接查询：（表有公共部分，比如下面name是两个表的交集）
        select * from students,chengji WHERE students.name:chengji.name
    左连接查询：
    右连接查询：
    
    
--------------------------------------------------linux------------------------------------------------------------------------------------------
虚拟机网卡桥接模式（共用交换机）下，宿主机和虚拟机都关闭防火墙，可以互相ping通
linux： centos
    常用命令：
		who
        ll、 ls
        touch
        cat、more
        cd
        pwd
        mkdir
        rm
        gedit
        cp
        mv
        find
        grep： grep "str" 1.txt
        
        重定向： cat 1.txt 2.txt >3.txt(合并1、2 到3.txt)
            >
            >>

关闭防火墙命令：systemctl stop firewalld.service
开启防火墙：systemctl start firewalld.service
查看防火墙状态：systemctl status firewalld
			
看命令行提示符 ，如果是#，那就是root用户，如果是$，那就是普通用户
	
普通用户切换到root用户：
	[zcl@localhost ~]$ su -

    
-----------------------------------------------web selenium--------------------------------------------------------------------------------------------
selenium：：selenium：2.9.1   firebug：2.0.19        firefox：35.0.1
    selenium： 是Firefox的一个插件，先用selenium工具自动生成好py脚本，再手动在脚本里修改
        录制脚本
        将录制的脚本导出py文件
        在selenium插件中编辑，注释等
        常用命令：   
            goback
            open
            refresh
            pause
            click
            type
            close
    firebug：是Firefox的一个插件，快速定位元素。
        firepath
        F12 快速开启firebug
    
    
    HTML规定id属性在整个HTML文档中必须是唯一的
    
    from selenium import webdriver
    driver:webdriver.Firefox() 
    
    
    
    1）driver.find_element_by_id()                    id属性在整个HTML文档中必须是唯一,有些标签没有id
    2）driver.find_element_by_name()                  不唯一、可重复
    3）driver.find_element_by_class_name()            前提：元素有class属性，有些标签没有class_name
    4）driver.find_element_by_tag_name()              HTML本质就是由不同的tag(标签)组成，而每个tag都是指同一类，所以tag定位效率低，一般不建议使用； tag_name定位就是通过标签名来定位
        返回：符合条件的第一个标签
        driver.find_elements_by_tag_name("input")[1].send_keys("xxx")   第1个input标签
    5）driver.find_element_by_link_text()             针对a标签，链接中的全部文本
    6）driver.find_element_by_partial_link_text()     针对a标签，链接中的局部文本，但是必须是该文本具有唯一性
    7）driver.find_element_by_xpath()
            Xpath定位策略(方式)
                1. 路径-定位
                    1). 绝对路径以/开始,使用Firebug可以快速生成，元素XPath绝对路径
                    2).相对路径以//开始,使用Friebug扩展插件FirePath可快速生成，元素相对路径，有些元素不能生成元素的相对路径                                                
                2. 利用元素属性-定位（元素属性用@）
                        //*[@id='userA' and @class='telA']   #find_element(标签)
                        *也可以换成标签名
                3. 层级与属性结合-定位
                        //*[@id='telA']/input
                4. 属性与逻辑结合-定位
                        //*[@id='userA' and @class='telA']
                        
    8）driver.find_element_by_css_selector()    （配合用FirePath检验下元素定位是否正确）
            CSS定位常用策略 (方式)    推荐用css，因为它比xpath定位快
                1. id选择器,用#
                    #userA
                2. class选择器,用.
                    input.s_ipt或.s_ipt
                    
                    <span class="bg s_ipt_wr quickdelete-wrap">
                        span[class='bg s_ipt_wr quickdelete-wrap'] 找到
                        .bg s_ipt_wr quickdelete-wrap 找不到，因为class里有空格，当没有空格时，用.就能找到了
                    
                3. 元素选择器  
                    input或input[autocomplete="off"]
                4. 属性选择器  
                    [type="password"]
                5. 层级选择器  
                    span input
                    或span>input  
                    或 span[class="bg s_ipt_wr quickdelete-wrap"] input
                    > 可以用空格代替 如： p input 或者 p [type='password']
                        
                    #userA          id选择器
                    .telA           class选择器
                    input           选择所有input标签
                    [type="password"]  其他属性选择
                    p>input         父元素为p元素的input标签
    
from selenium import webdriver 
from selenium.webdriver.common.action_chains import ActionChains
import time
driver:webdriver.Firefox(executable_path: r"C:\Program Files\Mozilla Firefox\geckodriver.exe") 

base_url : "http://www.baidu.com"
driver.get(base_url)
current_handle :driver.current_window_handle
print(current_handle)
txt_type : driver.find_element_by_css_selector("#kw")
txt_type.send_keys("taobao")
driver.find_element_by_css_selector("#su").click()
time.sleep(5)
driver.find_element_by_xpath("//*[@class='favurl']").click()
time.sleep(5)
all_handles : driver.window_handles
print(all_handles)
# 打印新窗口的句柄
print(driver.window_handles[-1])
for handle in all_handles:
    # 切换到新的窗口
    if handle != current_handle :
        driver.switch_to.window(handle)
        input : driver.find_element_by_xpath("//input[@id='q']")
        time.sleep(5)
        input.send_keys("南极装")
        time.sleep(3)
        driver.find_element_by_css_selector("button[class='btn-search tb-bg']").click()    
    
element.clear() #send_keys前clear下
element.send_keys(key)    
    
    
    
    
------------------------------------------ui-接口-总结--------------------------------------------------------------------------------------------
appium:
        1、adroid、apium,移动端、优先级高；
        aapt dump badging xxx.apk
        aapt dump badging xxx.apk |findstr "launchable-activity"
        C:\Users\Mir-Z>adb shell pm list packages
            列举所有包名
        adb install apk名字
        
        C:\Users\Mir-Z>netstat -aon|findstr "228(端口号或者pid)"
        C:\Users\Mir-Z>adb connect 127.0.0.1:62025
        C:\Users\Mir-Z>adb devices
        启动appium服务
        
        adb shell monkey -p com.tal.kaoyan -v -v -v 1   
        adb shell monkey -p xxx.xxxx.xxx  -s 123123 --throttle 300 -v -v 20 > d:\monkey.txt
        #代表有root权限，$代表没有root权限
        C:\Users\Mir-Z>adb -s 127.0.0.1:62001 shell

        class yaml_conf: #desired_caps配置
            def __init__(self):
                """Constructor"""
                file : r"..\data\desired_caps.yaml"
                yf : open(file,'r')
                self.data:yaml.load(yf)
                
                self.desired_caps={}
                self.desired_caps['platformName']=self.data['platformName']
                self.desired_caps['platformVersion']=self.data['platformVersion']
                self.desired_caps['deviceName']=self.data['deviceName']
                self.desired_caps['app']=self.data['app']
                self.desired_caps['appPackage']=self.data['appPackage']
                self.desired_caps['appActivity']=self.data['appActivity']
                self.desired_caps['noReset']=self.data['noReset']
                self.desired_caps['automationName']=self.data['automationName']
                #self.driver:webdriver.Remote('http://'+str(data['ip'])+':'+str(data['port'])+'/wd/hub',desired_caps)
                
            platformName: Android
            platformVersion: 5.1.1
            deviceName: 127.0.0.1:62025
            app: C:\Users\Mir-Z\Desktop\my\App\kaoyan3.1.0.apk
            appPackage: com.tal.kaoyan
            appActivity: com.tal.kaoyan.ui.activity.SplashActivity
            noReset: True
            automationName: uiautomator2    #抓取toast元素
            unicodeKeyboard: True
            resetKeyboard: True
            ip: 127.0.0.1
            port: 4723

UI自动化：
    web selenium ; appium
    driver.get()
    driver.find_element(BY.x,y)
        //*[@id='userA' and @class='telA']  #xpaht定位
        
        from selenium.webdriver.common.by import By
        def xx(*loc):
            return self.driver.find_element(*loc) 
        wemedia_cacel=(By.ID,'com.tal.kaoyan:id/view_wemedia_cacel')
        driver.find_elements(*self.major_subject_title)[1].click()
    
接口：
    requests.get(url,headers,data,cookies,verify,proxy,)   #cookie可写在hearders，也可单独写cookies
    requests.session().get()

cookies:
    加进requests；
    加进session；
    加进driver；
    
    cookie : driver.get_cookie('cookieKey')
    cookies : driver.get_cookies() 
    
    一个是把cookie先写成字典形式，然后把字典转换为cookiejar
        s : requests.Session()  # 开启一个会话Session
        cookie_dict={'49BAC005-7D5B-4231-8CEA-16939BEACD67': 'cktest001',   # 从chrome浏览器中取到的cookie值
                     'JSESSIONID':'F4FFF69B8XXXXXXC8DCB4C061C0',
                     'JSESSIONIDSSO':'9D49C76FD6XXXXXF294242B44A'
                     }
        s.cookies : requests.utils.cookiejar_from_dict(cookie_dict, cookiejar:None, overwrite:True)  # 把cookie值转换为cookiejar类型，然后传给Session
        注意：这个方法会替换掉原有的cookies

    二是追加cookies
      s : requests.Session()  # 开启一个会话Session
      jar : requests.cookies.RequestsCookieJar()   # 创建一个Cookie Jar对象
      jar.set('49BAC005-7D5B-4231-8CEA-1XXXXBEACD67','cktXXXX001')  # 向Cookie Jar对象中添加cookie值
      jar.set('JSESSIONID','F4FFF69B8CXXXX80F0C8DCB4C061C0')
      jar.set('JSESSIONIDSSO','9D49C7XXXX448FDF5B0F294242B44A')
      s.cookies.update(jar)  # 把cookies追加到Session中

response属性：
    print response.text      # 查看响应内容，response.text 返回的是Unicode格式的数据
    print respones.content   # 查看响应内容，response.content返回的字节流数据
    print response.url       # 查看响应头部字符编码
    print response.encoding    # 查看响应码
    print response.status_code
    print response.encoding
    print response.raw.read(10)
    print response.json()
    print response.url 
    
headers:
    headers : {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"}

    --------------------------------
    一、HTTP Request header
    --------------------------------
        1、Cache头域
            if-Modified-since：缓存
            if-None-Match：可提高性能（在Response中添加ETag信息，客户端再次请求资源，Request中加入if-None-Match（ETag的值），服务器验证ETag，若没改变返回状态码304，有改变，返回状态码200）
            Pragma：防止页面被缓存
            Cache-Control：Response—Request遵循的缓存机制
            　　public：可以被任何缓存所缓存
            　　private:内容只缓存在私有缓存中
            　　no-cache：所有内容都不会被缓存
        2、Client头域
            Accept：浏览器可以接受的文件类型（Accept：text/html 表示浏览器可接受服务器返回的文件类型为text/html）
            Accept-Encodig：指定压缩方法，是否支持压缩，支持什么压缩方法（gzip、deflate）
            Accept-Language：浏览器申明自己的接收语言
            User-Accept：告知服务器客户端使用的操作系统与浏览器的名称和版本
            Accept-chareset：浏览器申明自己接收的字符集。如gb2312，UTF_8
        3、Cookie/Login头域
            Cookie：将cookie的值发送给服务器
        4、Entity头域
            Content-Length：发送给HTTP服务器的数据长度
            Content-Type：决定文件接收方将以什么形式、什么编码读取此文件
        5、Miscellaneous头域
            Referer：提供了Request的上下文信息，告诉服务器我是从哪个链接过来的
            A------>B（B的服务器从Referer中统计有多少用户是从A过来的）
        6、Transport头域
            connection：Keep—alive            TCP连接不会关闭
            connection：close                     一个Request完成后，TCP连接关闭
        7、Host：发送请求时，该报头域是必需的。主要用于指定被请求资源的Internet主机和端口号，通常从HTTP URL 中提取出来

         
    --------------------------------
    二、HTTP Response header
    --------------------------------
        1、Cache头域
            Date：生成消息的具体时间和日期
            Expires：浏览器在指定过期时间内使用本地缓存
        2、Cookie/Login头域
            P3P：用户跨域设置cookie，可以解决iframe跨域访问cookie的问题
            Set-Cookie：重要的header，用于把cookie发送到客户端浏览器，每一个写入cookie都会生成一个set-cookie
        3、Entity头域
            ETag：与if-None-Match配合使用
            Last-Modified：用于指示资源的最后修改日期和时间
            Content-Type：Web服务器告知浏览器自己响应对象的类型和字符集
            Content-Length：指明实体正文长度，以字节方式存储的十进制数字表示。在数据下行中，要预先在服务器中缓存所有数据，然后所有数据一并发给客户端
            Content-Encoding：Web服务器表明自己用了什么压缩方式（gzip、deflate）压缩响应中的对象
            Content-Language：服务器告知浏览器自己响应的对象语言
        4、Miscellaneous头域
            Server：指明HTTP服务器的软件信息
            X-Powered-By：表明网站是用什么技术开发的
            X-AspNet-Version：如果网站是用Asp/Net开发的，这个header用来表明Asp/Net的版本
        5、Transport头域
            connection：Keep—alive            TCP连接不会关闭
            connection：close                     一个Request完成后，TCP连接关闭
        6、Location头域
            Location：用于重定向一个新的位置，包括新的URL地址
restful风格
    get:
        https://host:port/path?xxx:aaa&ooo:bbb;
        ？:url里面的？这个符号是个分割线，用来区分问号前面的是path，问号后面的是参数;
        没有请求body
    post:
        Content-Type: application/x-www-form-urlencoded,如果不加入该head则在body中设置的参数无效。
        post 参数写着fiddler或者postman request的body中，fiddler post QueryStrin 的参数貌似是绑定到url中去了？
        
    post请求相对于get请求多一个body部分，body部分常见的数据类型有以下四种（注意是常见的，并不是只有4种）
        application/x-www-form-urlencoded
        application/json
        text/xml
        multipart/form-data        
        
#退出前 切换手机输入法为原生输入法
    driver.activate_ime_engine(driver.available_ime_engines[0]) 
    driver.quit()
    
等待：
    toast_element:WebDriverWait(driver,5).until(lambda x:x.find_element_by_xpath(message))
    print(toast_element.text)     
    
    until(method,message=")调用该方法提供的驱动程序做为一个参数，直到返回值不为False
    until_not(method,message=")调用该方法提供的驱动程序做为一个参数，直到返回值为False
                
    cls.driver.implicitly_wait(5)    #cls相对与self       
            
一些元素属性：
    driver.refresh()
    driver.forward()
    driver.back()
    driver.find_element_by_id('i1')
    driver.find_element_by_class_name('c1')
    driver.find_element_by_name('n1')
    driver.find_element_by_xpath('//*[@id="i1"]')
    driver.find_element_by_css_selector('#i1')
    driver.find_element_by_tag_name('input')
    driver.find_element_by_link_text('登录')
    driver.find_elements_by_partial_link_text('录')
    driver.add_cookie({'name':'tmp','value':'123123123'})
    driver.delete_all_cookies()
    driver.delete_cookie('UiCode')
    driver.get_window_size()
    driver.set_window_size('width','height')
    driver.get_window_position()
    driver.set_window_position(20,20)
    driver.maximize_window()
    driver.current_window_handle
    driver.window_handles
    driver.get_screenshot_as_png()
    driver.get_screenshot_as_file('fileName.png')
    driver.execute_script(script, *args)
    driver.close()
    driver.quit()
    driver.page_source
    driver.title
    driver.current_url
    driver.name  # 获取浏览器名称 如：chrome

    element.get_attribute('style')
    element.send_keys()
    element.clear()
    element.click()
    element.get_property('id')
    element.is_displayed()
    element.is_selected()
    element.tag_name
    element.size
    element.text
    element.submit()
    element.location
    element.screenshot()

    NoSuchElementException：没有找到元素
    NoSuchFrameException：没有找到iframe
    NoSuchWindowException:没找到窗口句柄handle
    NoSuchAttributeException:属性错误
    NoAlertPresentException：没找到alert弹出框
    ElmentNotVisibleException：元素不可见
    ElementNotSelectableException：元素没有被选中
    TimeoutException：查找元素超时 


            

--------------------------------------------------------------------------------------------------------------------------------------------    
xml：
    必须要有根节点；
    第一句话
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

-------------------------------------------------------------------------------------------------------------------------------


-----------------------------------upgrade-升级bin文件-------------------------------------------------------------------------------------------
[同事写的code]
def binstr_to_int_list(arg):    #ord 转成ascii
    result : []
    hLen : len(arg)  
    for i in xrange(hLen):
        val : ord(arg[i])  
        result.append(val)
    return result

seg_len : 200    #单个升级包内容大小是200字节
file : open(file_path, "rb")
file_data : file.read()
file_len : file.tell()
file.close()
total_seg_cnt : (file_len + seg_len - 1) / seg_len    #分割升级文件
for i in range(0, total_seg_cnt):
    start_index : i*seg_len
    data : file_data[start_index : start_index + seg_len]
    data_len : len(data)
    if data_len == 0:
        break

    data : os_utils.binstr_to_int_list(data)    #将升级内容转成ascii，之后嵌入到15F1里
    last_frame : 0
    if total_seg_cnt-i-1 == 0:
        last_frame : 1
    pkt_1501 : proto_3762.pkt_3762_1501(3, last_frame, 0, total_seg_cnt,
                                        i, data_len, data)
    cmd_list.append(pkt_1501.get_pkt_int_list(1, 1, (i % 256)))

    print "%d/%d" % (len(cmd_list), total_seg_cnt)

    if data_len < seg_len:     #保险 ？
        break
            
for i in range(1,2):
    list_len : len(cmd_list)
    cmd_index : 0
    if only_last_frame != 0:
        cmd_index : list_len - 1
    print '-----------------------------------%d' % (cmd_index) 
    t1 : datetime.datetime.now()

    while cmd_index < list_len:
        cmd : cmd_list[cmd_index]

        #print_bin("send:\n", cmd)
        ser.write(cmd)
        t2 : datetime.datetime.now()
        print "segment index : %d/%d   -   delta : %s" % (cmd_index, len(cmd_list), str(t2 - t1)[:-3])
        result_str : ser.read()
        while(ser.inWaiting() > 0):
            result_str += ser.read(ser.inWaiting())
        if len(result_str):      
            cmd_index : cmd_index + 1     #当串口收到包后，继续下发下一帧
            #time.sleep(0.1)
        result_str : ""
        time.sleep(0.05)



-------------------------------回调函数的理解------------------------------------------------------------------------------------------------
# coding:utf-8

def clean1(times):
    """
    就假装是扫地吧，这种函数命名方式，千万别学习
    :param times: 次数
    :return: None
    """
    print '已完成扫地次数:', str(times)
    return "CLEAN1"

def clean2(times):
    """
    默默的装作洗抽油烟机
    :param times: 次数
    :return: None
    """
    print '已洗抽油烟机次数', str(times)
    return "CLEAN2"
    

def call_clean(times, function_name):      #我的理解是，function_name，函数指针，参数没有写死，call_clean就是个回调函数。
    """
    这个很重要，这个就是家政公司的业务系统，要啥业务都得在这说
    这个是实现回调函数的核心
    :param times:次数
    :param function_name:回调函数名
    :return:调用的函数结果
    """
    return function_name(times)    #函数体内存在函数调用，将call_clean的参数times传递给function_name

if __name__ == '__main__':
    N : clean2(2)
    print N
    call_clean(100, clean2)  # 给我洗100次抽油烟机，好吧，很变态
    
====自己写的最简单的回调函数====
def prn1():
    print "!111111"
    
def prn2():
    print "222222"
    
def call(fun_name):
    fun_name()
    
call(prn1)
-------------------------------------------------------------------------------------------------------------------------------


-----------------------------------参考代码--------------------------------------------------------------------------------------------
if False == os.path.exists(cco_exe_path):   #False 放到前面，明了
    print cco_exe_path + " does not exist" 
    exit()                                  # 退出主进程

	
def _get_dec_val(str_val):
    int_val : int(str_val, 16)
    assert(int_val <= 255)      #assert用的好
    assert(int_val >= 0)
    return str(int_val)
	
try:      #try 来导包
    import pygraphviz as pgv
    G:pgv.AGraph(strict:False,directed:True)
except Exception,e:  
    support_graphic : False    #导包失败，标志为False
    
def err_exit():
    print("Press 'ENTER' to exit...")
    while True:
        if ord(msvcrt.getch()) in [13]:
            exit()
    return
    
read_str : bstr.decode("hex")
ser.write(read_str)

# "\0x12x34\0x56\0x78\0x9A\0xBC" => "12 34 56 78 9A BC"
def binstr_to_hexstr(arg):
    result : ''
    hLen : len(arg)
    for i in xrange(hLen):
        hvol : ord(arg[i])
        hhex : '%02X'%hvol
        result += hhex+' '
    return result

# "\0x12x34\0x56\0x78\0x9A\0xBC" => [0x12, 0x34, 0x56, 0x78]
def binstr_to_int_list(arg):
    result : []
    hLen : len(arg)
    for i in xrange(hLen):
        val : ord(arg[i])
        result.append(val)
    return result
    
ctrl_hex : binascii.a2b_hex(ctrl_list)

def sent_data_from_serial(ser, whole_str):
    bstr : whole_str.replace(" ", "")
    read_str : bstr.decode("hex")
    ser.write(read_str)
    logging.info('meter sent:' + whole_str)
    
 while True:
        data += ser.read()
        ser_str_data_tmp : binascii.b2a_hex(data)
        ser_str_data : ser_str_data_tmp.lower()
        #print "00 --> %s" %ser_str_data
        if ser_str_data.startswith("fe") or ser_str_data.startswith("68"):
            #print "01 --> %s" %ser_str_data
            while(ser_str_data.startswith("fe")):
                ser_str_data : ser_str_data[2:]

            dtgm_obj : re.match(r"(\A(68)(\w{12})68(\w{2})+16)", ser_str_data)
            
def read_from_config(secion_name, item_name):
    config = ConfigParser.ConfigParser()
    config.read(configfile)
    return config.get(secion_name, item_name)
    
def write_to_config(secion_name, item_name, value):
    config = ConfigParser.ConfigParser()
    config.read(configfile)
    if(config.has_section(secion_name) == False):
        config.add_section(secion_name)
    config.set(secion_name,item_name,value)
    with open(configfile, 'w') as config_file:
        config.write(config_file)
        
bin_data += ser.read()
hex_data : bin_data.encode("hex")
等价于
binstr += ser.read()
result : binascii.b2a_hex(binstr)

if len(sys.argv) <= 1 or len(sys.argv) > 4:
    print "usage:\n\tuart_port_read_log.py com1 [file_name_tag] [folder_name]"
    print "\tcom1:            the uart port to read log"
    print "\tfile_name_tag:   a tag in recving file name. optional arg."
    print "\tfile_name_tag:   a tag in recving file path. optional arg.\neg:"
    print "uart_port_read_log.py com1 cco 20171008"
    print "read log from com1. also save log to .\\20171008\\com1_cco_20171008.txt"
    exit()
    
----------------------------------自己写的代码1-（串口工具，收发报文）-------------------------------------------------------------------------------
import serial
import binascii
import logging
import threading
import os
import time
import re
import Queue
import sys

os.system("title SerialTool:")
wait_timeout : 10
complete : False    
event : threading.Event()
log_path : os.getcwd()
log_file_name : time.strftime('%Y-%m-%d-%H%M%S',time.localtime()) + ".txt"

logging.basicConfig(level:logging.DEBUG,    #写入文件等级
                    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                    filename : log_path + '\\' + log_file_name,
                    filemode='a')
console : logging.StreamHandler()
console.setLevel(logging.INFO)    #控制台输出等级
formatter : logging.Formatter('%(asctime)s %(levelname)s %(message)s')
console.setFormatter(formatter)
logging.getLogger().addHandler(console)

def open_serial(port, rat : 9600):
    if port[0 : 3] == 'com':
        port_num : int(port[3:], 10)
    else:
        print "Not Satisfiable! It should be like this: com2"
        err_exit()
    if port_num not in range(1, 256):
        print "com port should in 1 among 255."
        return None

    try:
        ser : serial.Serial(
            port : port,
            baudrate : rat,
            parity : serial.PARITY_EVEN,
            stopbits :serial.STOPBITS_ONE,
            bytesize : serial.EIGHTBITS,
            timeout : wait_timeout,
        )
    except:
        print 'open serial fail!'
        return None

    return ser

def add_space_in_str(input_str):
    result : ""
    for i in range(0,len(input_str),2):
        result += input_str[i:i+2] + " "       
    return result.upper()

def read_serial():
    binstr : ""
    while True:
        binstr += ser.read()
        if binstr == None:
            continue
        result : binascii.b2a_hex(binstr)
        re_obj : re.match(r".*(83|C3|c3).*16", result)
        if re_obj:
            re_obj1 : re.match(r"\A68(.*)(83|C3)(.*)16",result)
            if re_obj1:
                result : add_space_in_str(result)
                logging.debug("recv | "+result)
                print("recv | "+result)
                event.set()
                binstr : ""
            else:
                while True:
                    if not result.startswith("68"):
                        result : result[2:]
                    else:
                        result : add_space_in_str(result)
                        print("recv | "+result)
                        event.set()
                        binstr : ""
                        break

        
def send_to_ser(cmd_str):
    cmd_str : cmd_str.replace(" ","")
    cmd : binascii.a2b_hex(cmd_str)
    ser.write(cmd)
    cmd_str : add_space_in_str(cmd_str)
    logging.debug("send | "+cmd_str)
    event.wait()     #wait 和clear 一般配套使用。
    event.clear()

    


if __name__ == "__main__":
    #com : sys.argv[1]
    #baudrate : sys.argv[2]
    com : "com4"
    baudrate : 9600
    que = Queue.Queue()
    ser = open_serial(com,baudrate)
    t1 = threading.Thread(target:read_serial,args=[])
    t1.setDaemon(True)
    t1.start()
    while True:
        input_str : raw_input('send | ')
        send_to_ser(input_str)


--------------------------自己写的代码2-（路由主动抄表流程）-（日志记录、守护线程）--------------------------------------------------------------------------------------------------- 
import serial
import binascii
import logging
import threading
import os
import time
import re
import Queue


wait_timeout : 10
complete : False    
event = threading.Event()
log_path = os.getcwd()
log_file_name = str(time.time())
========================================================
    wuqi应用
logging.basicConfig(level=logging.DEBUG,
    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
    filename = automation_log_path,
    filemode='a'
    )
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s %(levelname)s: %(message)s")
console.setFormatter(formatter)
logger = logging.getLogger()
logger.addHandler(console)
========================================================
#===============================================================
def open_serial(port, rat : 2400):
    if port[0 : 3] == 'com':
        port_num : int(port[3:], 10)
    else:
        print "Not Satisfiable! It should be like this: com2"
        err_exit()
    if port_num not in range(1, 256):
        print "com port should in 1 among 255."
        return None

    try:
        ser : serial.Serial(
            port : port,
            baudrate : rat,
            parity : serial.PARITY_EVEN,
            stopbits :serial.STOPBITS_ONE,
            bytesize : serial.EIGHTBITS,
            #timeout : 0.2,
        )
    except:
        print 'open serial fail!'
        return None

    return ser

def add_space_in_str(input_str):
    result : ""
    for i in range(0,len(input_str),2):
        result += input_str[i:i+2] + " "       
    return result.upper()

def read_serial(que):
    binstr : ""
    while True:
        binstr += ser.read()
        if binstr == None:
            continue
        result : binascii.b2a_hex(binstr)
        re_obj : re.match(r".*(83|C3|c3).*16", result)
        if re_obj:
            re_obj1 : re.match(r"\A68(.*)(83|C3)(.*)16",result)
            if re_obj1:
                result : add_space_in_str(result)
                que.put(result)
                binstr : ""
            else:
                while True:
                    if not result.startswith("68"):
                        result : result[2:]
                    else:
                        result : add_space_in_str(result)
                        que.put(result)
                        binstr : ""
                        break



            
def process_ser(que):
    global event
    global complete
    while True:
        line : que.get(block : True, timeout : wait_timeout) 
        #logging.debug("recv :::%s"%line)
        if re.match(r"\A68(.*)(83|C3)(.*)03 08 00", line):
            #logging.debug("03 08 00")
            logging.debug("resp:%s"%line)
            event.set()
        if re.match(r"\A68(.{28})00 01 00(.*)16", line):
            #logging.debug("00 01 00")
            logging.debug("resp:%s"%line)
            event.set()
        if re.match(r"\A68(.*)(83|C3)(.*)14 01 00(.*)00 01 00(.*)16", line):
            #logging.debug("14f1 -1")
            logging.debug("resp:%s"%line)
            event.set()
        if re.match(r"\A68(.*)(83|C3)(.*)06 02 00(.*)68 91(.*)16", line):
            logging.debug("06 02 00")
            logging.debug("resp:%s"%line)
            event.set()
        if re.match(r"\A68(.*)(83|C3)(.*)06 04 00(.*)16", line):
            #logging.debug("06 04 00 shangbaogongkuang")
            complete :  True
            logging.debug("resp:%s"%line)
            logging.debug("complete route read meter")
        
def send_to_ser(cmd_str):
    event.wait()
    event.clear()
    cmd_str : cmd_str.replace(" ","")
    cmd : binascii.a2b_hex(cmd_str)
    ser.write(cmd)
    cmd_str : add_space_in_str(cmd_str)
    logging.debug("send:"+cmd_str)
    


if __name__ == "__main__":
    logging.debug("init...")
    que : Queue.Queue()
    ser : open_serial("com4", rat : 9600)
    t1 : threading.Thread(target:read_serial,args=[que])
    t1.setDaemon(True)
    t1.start()
    t2 : threading.Thread(target:process_ser,args=[que])
    t2.setDaemon(True)
    t2.start()
    event.set()
    _03f4 : "68 0F 00 43 01 00 5F 00 00 09 03 08 00 B7 16 "
    _12f1 : "68 0F 00 43 00 00 5F 00 00 05 12 01 00 BA 16 "
    _14f1_request : "68 2F 00 01 04 00 5F 00 00 0B 30 00 00 5C 55 48 35 83 05 04 00 00 14 01 00 02 00 10 68 35 83 05 04 00 00 68 11 04 33 33 34 33 73 16 00 7C 16 "
    _14f1_confirm : "68 1F 00 01 04 00 5F 00 00 0C 30 00 00 5C 55 48 35 83 05 04 00 00 14 01 00 01 00 00 00 70 16"
    send_to_ser(_03f4)
    send_to_ser(_12f1)
    time.sleep(1)
    send_to_ser(_14f1_request)
    send_to_ser(_14f1_confirm)
    while  True:
        if complete:
            logging.debug("!!!!!!!!!")
            exit()
   
------------------matplotlib import pyplot as plt-------csv 文件操作------------------------------------------------------------------------------------------------------
import csv
from datetime import datetime

from matplotlib import pyplot as plt

# Get dates, high, and low temperatures from file.
filename : 'death_valley_2014.csv'
with open(filename) as f:
    reader : csv.reader(f)  #reader相当与lines，可迭代
    header_row : next(reader)  #读走了第一行

    dates, highs, lows : [], [], []
    for row in reader:   #因为第一行被读走了，从第二行开始读取
        # print row
        try:
            current_date : datetime.strptime(row[0], "%Y-%m-%d")
            high : int(row[1])
            low : int(row[3])
        except ValueError:
            print(current_date, 'missing data')
        else:
            dates.append(current_date)
            highs.append(high)
            lows.append(low)
# print dates
# Plot data.
fig : plt.figure(dpi:128, figsize=(10, 6))    #创建图像
plt.plot(dates, highs, c='red', alpha=0.5)     #alpha指颜色深浅，实参alpha 指定颜色的透明度。 Alpha 值为0表示完全透明， 1（ 默认设置） 表示完全不透明
plt.plot(dates, lows, c='black', alpha:0.5)
plt.fill_between(dates, highs, lows, facecolor='blue', alpha:0.1)   #填充之间

# Format plot.
title : "Daily high and low temperatures - 2014\nDeath Valley, CA"
plt.title(title, fontsize:20)  #添加标题
plt.xlabel('', fontsize:16)    #x轴标题
fig.autofmt_xdate()            #设置x轴时间外观
plt.ylabel("Temperature (F)", fontsize:16)  #y轴标题
plt.tick_params(axis='both', which='major', labelsize:16)   # 设置刻度标记的大小，axis=‘both‘ 表示指定的实参影响 x 轴和 y 轴上的刻度

plt.show()   #显示


--------------------------------------------------------------------------------------------------
def send_cmdlist_to_cco(cmdlist, error_queue):
    global ready_to_send_event
    global send_pkt_record
    global max_concurrently_cnt

    list_len : len(cmdlist)
    cmd_index : 0
    for cmd_index in range(list_len):
        int_list1 : os_utils.hexstr_to_int_list(cmdlist[cmd_index])
        bin_list : os_utils.int_list_to_binstr(int_list1)
        seq : int_list1[9]
        send_pkt_record[seq] : cmdlist[cmd_index]
        if(max_concurrently_cnt == 0):
            if(ready_to_send_event.is_set() == False):
                ready_to_send_event.wait()
            logging.debug("cctt send: %s" % (cmdlist[cmd_index]))
            ser.write(bin_list)
            time.sleep(0.25)
        else:
            if(ready_to_send_event.is_set() == False):
                ready_to_send_event.wait()
            logging.debug("cctt send: %s" % (cmdlist[cmd_index]))
            ser.write(bin_list)
            time.sleep(0.25)
            if(cmd_index >= max_concurrently_cnt - 1):   #当大于并发数，就clear，进入wait
                ready_to_send_event.clear()
--------------------------------------------------------------------------------------------------











----------------------------------附录-bat--------------------------------------------------------------------------------------------
-、bat文件的创建
1.新建txt文本文件
2.向文本文件中输入命令
3.保存并修改文本文件后缀为.bat
4.双击保存后的bat文件，运行
二、bat命令大全
1 echo 和 @
@                          #关闭单行回显
echo off                  #从下一行开始关闭回显
@echo off  
1 echo 和 @
@                          #关闭单行回显
echo off                  #从下一行开始关闭回显
@echo off               #从本行开始关闭回显。一般批处理第一行都是这个
echo on                  #从下一行开始打开回显
echo                      #显示当前是 echo off 状态还是 echo on 状态
echo.                     #输出一个”回车换行”，空白行
                             #(同echo, echo; echo+ echo[ echo] echo/ echo\)
 
2 errorlevel
echo %errorlevel%
每个命令运行结束，可以用这个命令行格式查看返回码
默认值为0，一般命令执行出错会设 errorlevel 为1
3 dir
dir                       #显示当前目录中的文件和子目录
dir /a                    #显示当前目录中的文件和子目录，包括隐藏文件和系统文件
dir c: /a:d              #显示 C 盘当前目录中的目录
dir c: /a:-d             #显示 C 盘根目录中的文件
dir c:\ /b/p             #/b只显示文件名，/p分页显示
dir *.exe /s             #显示当前目录和子目录里所有的.exe文件
4 cd
cd\                       #进入根目录
cd                        #显示当前目录
cd /d d:\sdk            #可以同时更改盘符和目录
5 md
md d:\a\b\c               #如果 d:\a 不存在，将会自动创建中级目录
#如果命令扩展名被停用，则需要键入 mkdir \a\b\c。
6 rd
rd abc                    #删除当前目录里的 abc 子目录，要求为空目录
rd /s/q d:\temp         #删除 d:\temp 文件夹及其子文件夹和文件，/q安静模式
7 del
del d:\test.txt            #删除指定文件，不能是隐藏、系统、只读文件
del /q/a/f d:\temp\*.*   #删除 d:\temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录
del /q/a/f/s d:\temp\*.*   #删除 d:\temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录
8 ren
ren d:\temp tmp           #支持对文件夹的重命名
9 cls
清屏
10 type
显示文件内容
type c:\boot.ini          #显示指定文件的内容，程序文件一般会显示乱码
type *.txt                #显示当前目录里所有.txt文件的内容
11 copy
拷贝文件
copy c:\test.txt d:\test.bak
复制 c:\test.txt 文件到 d:\ ，并重命名为 test.bak
copy con test.txt
从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件
con代表屏幕，prn代表打印机，nul代表空设备
copy 1.txt + 2.txt 3.txt
合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件
如果不指定 3.txt ，则保存到 1.txt
copy test.txt +
复制文件到自己，实际上是修改了文件日期
12 title
设置cmd窗口的标题
title 新标题              #可以看到cmd窗口的标题栏变了
13 ver
显示系统版本
14 label 和 vol
设置卷标
vol                       #显示卷标
label                     #显示卷标，同时提示输入新卷标
label c:system        #设置C盘的卷标为 system
15 pause
暂停命令
16 rem 和 ::
注释命令
注释行不执行操作
17 date 和 time
日期和时间
date                #显示当前日期，并提示输入新日期，按\"回车\"略过输入
date/t              #只显示当前日期，不提示输入新日期
time                #显示当前时间，并提示输入新时间，按\"回车\"略过输入
time/t              #只显示当前时间，不提示输入新时间
18 goto 和 :
跳转命令
:label              #行首为:表示该行是标签行，标签行不执行操作
goto label        #跳转到指定的标签那一行
19 find (外部命令)
查找命令
find \"abc\" c:\test.txt
在 c:\test.txt 文件里查找含 abc 字符串的行
如果找不到，将设 errorlevel 返回码为1
find /i “abc” c:\test.txt
查找含 abc 的行，忽略大小写
find /c \"abc\" c:\test.txt
显示含 abc 的行的行数
20 more (外部命令)
逐屏显示
more c:\test.txt          #逐屏显示 c:\test.txt 的文件内容
21 tree
显示目录结构
tree d:\                  #显示D盘的文件目录结构
22 &
顺序执行多条命令，而不管命令是否执行成功
23 &&
顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令
find \"ok\" c:\test.txt && echo 成功
如果找到了\"ok\"字样，就显示\"成功\"，找不到就不显示
24 ||
顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令
find \"ok\" c:\test.txt || echo 不成功
如果找不到\"ok\"字样，就显示\"不成功\"，找到了就不显示
25 |
管道命令
dir *.* /s/a | find /c \".exe\"
管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令
该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数
type c:\test.txt|more
这个和 more c:\test.txt 的效果是一样的
26 > 和 >>
输出重定向命令
> 清除文件中原有的内容后再写入
>> 追加内容到文件末尾，而不会清除原有的内容
主要将本来显示在屏幕上的内容输出到指定文件中
指定文件如果不存在，则自动生成该文件
type c:\test.txt >prn
屏幕上不显示文件内容，转向输出到打印机
echo hello world>con
在屏幕上显示hello world，实际上所有输出都是默认 >con 的
copy c:\test.txt f: >nul
拷贝文件，并且不显示\"文件复制成功\"的提示信息，但如果f盘不存在，还是会显示出错信息
copy c:\test.txt f: >nul 2>nul
不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息Echo ^^W ^> ^W>c:\test.txt
生成的文件内容为 ^W > W
^ 和 > 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号
27 <
从文件中获得输入信息，而不是从屏幕上
一般用于 date time label 等需要等待输入的命令
@echo off
echo 2005-05-01>temp.txt
date <temp.txt
del temp.txt
这样就可以不等待输入直接修改当前日期
28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*
命令行传递给批处理的参数
%0 批处理文件本身
%1 第一个参数
%9 第九个参数
%* 从第一个参数开始的所有参数
 
批参数(%n)的替代已被增强。您可以使用以下语法:
 
          %~1               - 删除引号(\")，扩充 %1
          %~f1              - 将 %1 扩充到一个完全合格的路径名
          %~d1              - 仅将 %1 扩充到一个驱动器号
          %~p1              - 仅将 %1 扩充到一个路径
          %~n1              - 仅将 %1 扩充到一个文件名
          %~x1              - 仅将 %1 扩充到一个文件扩展名
          %~s1              - 扩充的路径指含有短名
          %~a1              - 将 %1 扩充到文件属性
          %~t1              - 将 %1 扩充到文件的日期/时间
          %~z1              - 将 %1 扩充到文件的大小
          %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1
                        扩充到找到的第一个完全合格的名称。如果环境
                        变量名未被定义，或者没有找到文件，此组合键会
                        扩充到空字符串
 
可以组合修定符来取得多重结果:
 
         %~dp1             - 只将 %1 扩展到驱动器号和路径
         %~nx1             - 只将 %1 扩展到文件名和扩展名
         %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，
                        并扩展到找到的第一个文件的驱动器号和路径。
         %~ftza1           - 将 %1 扩展到类似 DIR 的输出行。
可以参照 call/? 或 for/? 看出每个参数的含意
echo load \"%%1\" \"%%2\">c:\test.txt
生成的文件内容为 load \"%1\" \"%2\"
批处理文件里，用这个格式把命令行参数输出到文件
29 if
判断命令
if \"%1\"==\"/a\" echo 第一个参数是/a
if /i \"%1\" equ \"/a\" echo 第一个参数是/a
/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?
if exist c:\test.bat echo 存在c:\test.bat文件
if not exist c:\windows (
          echo 不存在c:\windows文件夹
          )
if exist c:\test.bat ( echo 存在c:\test.bat ) else (  echo 不存在c:\test.bat  )
30 setlocal 和 endlocal
设置”命令扩展名”和”延缓环境变量扩充”
SETLOCAL ENABLEEXTENSIONS                  #启用\"命令扩展名\"
SETLOCAL DISABLEEXTENSIONS                 #停用\"命令扩展名\"
SETLOCAL ENABLEDELAYEDEXPANSION            #启用\"延缓环境变量扩充\"
SETLOCAL DISABLEDELAYEDEXPANSION           #停用\"延缓环境变量扩充\"
ENDLOCAL                                   #恢复到使用SETLOCAL语句以前的状态
“命令扩展名”默认为启用
“延缓环境变量扩充”默认为停用
批处理结束系统会自动恢复默认值
可以修改注册表以禁用\"命令扩展名\"，详见 cmd /? 。所以用到\"命令扩展名\"的程
序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确
保程序能在其它系统上正确运行
\"延缓环境变量扩充\"主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程
31 set
设置变量
引用变量可在变量名前后加 % ，即 %变量名%
set                          #显示目前所有可用的变量，包括系统变量和自定义的变量
echo %SystemDrive%           #显示系统盘盘符。系统变量可以直接引用
set p                        #显示所有以p开头的变量，要是一个也没有就设errorlevel:1
set p:aa1bb1aa2bb2           #设置变量p，并赋值为 : 后面的字符串，即aa1bb1aa2bb2
echo %p%                     #显示变量p代表的字符串，即aa1bb1aa2bb2
echo %p:~6%                  #显示变量p中第6个字符以后的所有字符，即aa2bb2
echo %p:~6,3%                #显示第6个字符以后的3个字符，即aa2
echo %p:~0,3%                #显示前3个字符，即aa1
echo %p:~-2%                 #显示最后面的2个字符，即b2
echo %p:~0,-2%               #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b
echo %p:aa:c%                #用c替换变量p中所有的aa，即显示c1bb1c2bb2
echo %p:aa=%                 #将变量p中的所有aa字符串置换为空，即显示1bb12bb2
echo %p:*bb:c%               #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2
set p=%p:*bb:c%              #设置变量p，赋值为 %p:*bb:c% ，即c1aa2bb2
set /a p:39                  #设置p为数值型变量，值为39
set /a p:39/10               #支持运算符，有小数时用去尾法，39/10:3.9，去尾得3，p:3
set /a p:p/10                #用 /a 参数时，在 : 后面的变量可以不加%直接引用
set /a p=”1&0″               #”与”运算，要加引号。其它支持的运算符参见set/?
set p:                       #取消p变量
set /p p:请输入
屏幕上显示”请输入”，并会将输入的字符串赋值给变量p
注意这条可以用来取代 choice 命令
注意变量在 if 和 for 的复合语句里是一次性全部替换的，如
@echo off
set p:aaa
if %p%==aaa (
          echo %p%
          set p:bbb
          echo %p%
          )
结果将显示
aaa
aaa
因为在读取 if 语句时已经将所有 %p% 替换为aaa
这里的\"替换\"，在 /? 帮助里就是指\"扩充\"、\"环境变量扩充\"
可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!
@echo off
SETLOCAL ENABLEDELAYEDEXPANSION
set p:aaa
if %p%==aaa (
          echo %p%
          set p:bbb
          echo !p!
          )
ENDLOCAL
结果将显示
aaa
bbb
还有几个动态变量，运行 set 看不到
%CD%                        #代表当前目录的字符串
%DATE%                      #当前日期
%TIME%                      #当前时间
%RANDOM%                    #随机整数，介于0~32767
%ERRORLEVEL%                #当前 ERRORLEVEL 值
%CMDEXTVERSION%             #当前命令处理器扩展名版本号
%CMDCMDLINE%                #调用命令处理器的原始命令行
可以用echo命令查看每个变量值，如 echo %time%
注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到
32 start
批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令
33 call
批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行
有时有的应用程序用start调用出错的，也可以call调用
34 choice (外部命令)
选择命令
让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……
win98里是choice.com
win2000pro里没有，可以从win98里拷过来
win2003里是choice.exe
choice /N /C y /T 5 /D y>nul
延时5秒
35 assoc 和 ftype
文件关联
assoc 设置'文件扩展名'关联，关联到'文件类型'
ftype 设置'文件类型'关联，关联到'执行程序和参数'
当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开
而是先判断.txt属于 txtfile '文件类型'
再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1
可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联
assoc                 #显示所有'文件扩展名'关联
assoc .txt            #显示.txt代表的'文件类型'，结果显示 .txt:txtfile
assoc .doc            #显示.doc代表的'文件类型'，结果显示 .doc:Word.Document.8
assoc .exe            #显示.exe代表的'文件类型'，结果显示 .exe:exefile
ftype                 #显示所有'文件类型'关联
ftype exefile         #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*
assoc .txt:Word.Document.8
设置.txt为word类型的文档，可以看到.txt文件的图标都变了
assoc .txt:txtfile
恢复.txt的正确关联
ftype exefile=\"%1\" %*
恢复 exefile 的正确关联
如果该关联已经被破坏，可以运行 command.com ，再输入这条命令
36 pushd 和 popd
切换当前目录
@echo off
c: & cd\ & md mp3             #在 C:\ 建立 mp3 文件夹
md d:\mp4                     #在 D:\ 建立 mp4 文件夹
cd /d d:\mp4                  #更改当前目录为 d:\mp4
pushd c:\mp3                  #保存当前目录，并切换当前目录为 c:\mp3
popd                          #恢复当前目录为刚才保存的 d:\mp4
37 for
循环命令
这个比较复杂，请对照 for/? 来看
for %%i in (c: d: e: f:) do echo %%i
依次调用小括号里的每个字符串，执行 do 后面的命令
注意%%i，在批处理中 for 语句调用参数用2个%
默认的字符串分隔符是\"空格键\"，\"Tab键\"，\"回车键\"
for %%i in (*.txt) do find \"abc\" %%i
对当前目录里所有的txt文件执行 find 命令
for /r . %%i in (*.txt) do find \"abc\" %%i
在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行
for /r . %%i in (.) do echo %%~pni
显示当前目录名和所有子目录名，包括路径，不包括盘符
for /r d:\mp3 %%i in (*.mp3) do echo %%i>>d:\mp3.txt
把 d:\mp3 及其子目录里的mp3文件的文件名都存到 d:\mp3.txt 里去
for /l %%i in (2,1,8) do echo %%i
生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1
for /f %%i in ('set') do echo %%i
对 set 命令的输出结果循环调用，每行一个
for /f \"eol:P\" %%i in ('set') do echo %%i
取 set 命令的输出结果，忽略以 P 开头的那几行
for /f %%i in (d:\mp3.txt) do echo %%i
显示 d:\mp3.txt 里的每个文件名，每行一个，不支持带空格的名称
for /f \"delims=\" %%i in (d:\mp3.txt) do echo %%i
显示 d:\mp3.txt 里的每个文件名，每行一个，支持带空格的名称
for /f \"skip:5 tokens:4\" %%a in ('dir') do echo %%a
对 dir 命令的结果，跳过前面5行，余下的每行取第4列
每列之间的分隔符为默认的\"空格\"
可以注意到 dir 命令输出的前5行是没有文件名的
for /f \"tokens:1,2,3 delims=- \" %%a in ('date /t') do (
          echo %%a
          echo %%b
          echo %%c
          )
对 date /t 的输出结果，每行取1、2、3列
第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列
分隔符指定为 - 和\"空格\"，注意 delims=- 后面有个\"空格\"
其中 tokens:1,2,3 若用 tokens:1-3 替换，效果是一样的
for /f \"tokens:2* delims=- \" %%a in ('date /t') do echo %%b
取第2列给 %%a ，其后的列都给 %%b
32 subst (外部命令)
映射磁盘。
subst z: \server\d           #这样输入z:就可以访问\server\d了
subst z: /d                   #取消该映射
subst                         #显示目前所有的映时
38        xcopy (外部命令)
文件拷贝
xcopy d:\mp3 e:\mp3 /s/e/i/y
复制 d:\mp3 文件夹、所有
#从本行开始关闭回显。一般批处理第一行都是这个 
echo on                  #从下一行开始打开回显
echo                      #显示当前是 echo off 状态还是 echo on 状态
echo.                     #输出一个”回车换行”，空白行
                             #(同echo, echo; echo+ echo[ echo] echo/ echo\)
 
2 errorlevel
echo %errorlevel%
每个命令运行结束，可以用这个命令行格式查看返回码
默认值为0，一般命令执行出错会设 errorlevel 为1
3 dir
dir                       #显示当前目录中的文件和子目录
dir /a                    #显示当前目录中的文件和子目录，包括隐藏文件和系统文件
dir c: /a:d              #显示 C 盘当前目录中的目录
dir c: /a:-d             #显示 C 盘根目录中的文件
dir c:\ /b/p             #/b只显示文件名，/p分页显示
dir *.exe /s             #显示当前目录和子目录里所有的.exe文件
4 cd
cd\                       #进入根目录
cd                        #显示当前目录
cd /d d:\sdk            #可以同时更改盘符和目录
5 md
md d:\a\b\c               #如果 d:\a 不存在，将会自动创建中级目录
#如果命令扩展名被停用，则需要键入 mkdir \a\b\c。
6 rd
rd abc                    #删除当前目录里的 abc 子目录，要求为空目录
rd /s/q d:\temp         #删除 d:\temp 文件夹及其子文件夹和文件，/q安静模式
7 del
del d:\test.txt            #删除指定文件，不能是隐藏、系统、只读文件
del /q/a/f d:\temp\*.*   #删除 d:\temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录
del /q/a/f/s d:\temp\*.*   #删除 d:\temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录
8 ren
ren d:\temp tmp           #支持对文件夹的重命名
9 cls
清屏
10 type
显示文件内容
type c:\boot.ini          #显示指定文件的内容，程序文件一般会显示乱码
type *.txt                #显示当前目录里所有.txt文件的内容
11 copy
拷贝文件
copy c:\test.txt d:\test.bak
复制 c:\test.txt 文件到 d:\ ，并重命名为 test.bak
copy con test.txt
从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件
con代表屏幕，prn代表打印机，nul代表空设备
copy 1.txt + 2.txt 3.txt
合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件
如果不指定 3.txt ，则保存到 1.txt
copy test.txt +
复制文件到自己，实际上是修改了文件日期
12 title
设置cmd窗口的标题
title 新标题              #可以看到cmd窗口的标题栏变了
13 ver
显示系统版本
14 label 和 vol
设置卷标
vol                       #显示卷标
label                     #显示卷标，同时提示输入新卷标
label c:system        #设置C盘的卷标为 system
15 pause
暂停命令
16 rem 和 ::
注释命令
注释行不执行操作
17 date 和 time
日期和时间
date                #显示当前日期，并提示输入新日期，按\"回车\"略过输入
date/t              #只显示当前日期，不提示输入新日期
time                #显示当前时间，并提示输入新时间，按\"回车\"略过输入
time/t              #只显示当前时间，不提示输入新时间
18 goto 和 :
跳转命令
:label              #行首为:表示该行是标签行，标签行不执行操作
goto label        #跳转到指定的标签那一行
19 find (外部命令)
查找命令
find \"abc\" c:\test.txt
在 c:\test.txt 文件里查找含 abc 字符串的行
如果找不到，将设 errorlevel 返回码为1
find /i “abc” c:\test.txt
查找含 abc 的行，忽略大小写
find /c \"abc\" c:\test.txt
显示含 abc 的行的行数
20 more (外部命令)
逐屏显示
more c:\test.txt          #逐屏显示 c:\test.txt 的文件内容
21 tree
显示目录结构
tree d:\                  #显示D盘的文件目录结构
22 &
顺序执行多条命令，而不管命令是否执行成功
23 &&
顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令
find \"ok\" c:\test.txt && echo 成功
如果找到了\"ok\"字样，就显示\"成功\"，找不到就不显示
24 ||
顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令
find \"ok\" c:\test.txt || echo 不成功
如果找不到\"ok\"字样，就显示\"不成功\"，找到了就不显示
25 |
管道命令
dir *.* /s/a | find /c \".exe\"
管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令
该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数
type c:\test.txt|more
这个和 more c:\test.txt 的效果是一样的
26 > 和 >>
输出重定向命令
> 清除文件中原有的内容后再写入
>> 追加内容到文件末尾，而不会清除原有的内容
主要将本来显示在屏幕上的内容输出到指定文件中
指定文件如果不存在，则自动生成该文件
type c:\test.txt >prn
屏幕上不显示文件内容，转向输出到打印机
echo hello world>con
在屏幕上显示hello world，实际上所有输出都是默认 >con 的
copy c:\test.txt f: >nul
拷贝文件，并且不显示\"文件复制成功\"的提示信息，但如果f盘不存在，还是会显示出错信息
copy c:\test.txt f: >nul 2>nul
不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息Echo ^^W ^> ^W>c:\test.txt
生成的文件内容为 ^W > W
^ 和 > 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号
27 <
从文件中获得输入信息，而不是从屏幕上
一般用于 date time label 等需要等待输入的命令
@echo off
echo 2005-05-01>temp.txt
date <temp.txt
del temp.txt
这样就可以不等待输入直接修改当前日期
28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*
命令行传递给批处理的参数
%0 批处理文件本身
%1 第一个参数
%9 第九个参数
%* 从第一个参数开始的所有参数
 
批参数(%n)的替代已被增强。您可以使用以下语法:
 
          %~1               - 删除引号(\")，扩充 %1
          %~f1              - 将 %1 扩充到一个完全合格的路径名
          %~d1              - 仅将 %1 扩充到一个驱动器号
          %~p1              - 仅将 %1 扩充到一个路径
          %~n1              - 仅将 %1 扩充到一个文件名
          %~x1              - 仅将 %1 扩充到一个文件扩展名
          %~s1              - 扩充的路径指含有短名
          %~a1              - 将 %1 扩充到文件属性
          %~t1              - 将 %1 扩充到文件的日期/时间
          %~z1              - 将 %1 扩充到文件的大小
          %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1
                        扩充到找到的第一个完全合格的名称。如果环境
                        变量名未被定义，或者没有找到文件，此组合键会
                        扩充到空字符串
 
可以组合修定符来取得多重结果:
 
         %~dp1             - 只将 %1 扩展到驱动器号和路径
         %~nx1             - 只将 %1 扩展到文件名和扩展名
         %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，
                        并扩展到找到的第一个文件的驱动器号和路径。
         %~ftza1           - 将 %1 扩展到类似 DIR 的输出行。
可以参照 call/? 或 for/? 看出每个参数的含意
echo load \"%%1\" \"%%2\">c:\test.txt
生成的文件内容为 load \"%1\" \"%2\"
批处理文件里，用这个格式把命令行参数输出到文件
29 if
判断命令
if \"%1\"==\"/a\" echo 第一个参数是/a
if /i \"%1\" equ \"/a\" echo 第一个参数是/a
/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?
if exist c:\test.bat echo 存在c:\test.bat文件
if not exist c:\windows (
          echo 不存在c:\windows文件夹
          )
if exist c:\test.bat ( echo 存在c:\test.bat ) else (  echo 不存在c:\test.bat  )
30 setlocal 和 endlocal
设置”命令扩展名”和”延缓环境变量扩充”
SETLOCAL ENABLEEXTENSIONS                  #启用\"命令扩展名\"
SETLOCAL DISABLEEXTENSIONS                 #停用\"命令扩展名\"
SETLOCAL ENABLEDELAYEDEXPANSION            #启用\"延缓环境变量扩充\"
SETLOCAL DISABLEDELAYEDEXPANSION           #停用\"延缓环境变量扩充\"
ENDLOCAL                                   #恢复到使用SETLOCAL语句以前的状态
“命令扩展名”默认为启用
“延缓环境变量扩充”默认为停用
批处理结束系统会自动恢复默认值
可以修改注册表以禁用\"命令扩展名\"，详见 cmd /? 。所以用到\"命令扩展名\"的程
序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确
保程序能在其它系统上正确运行
\"延缓环境变量扩充\"主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程
31 set
设置变量
引用变量可在变量名前后加 % ，即 %变量名%
set                          #显示目前所有可用的变量，包括系统变量和自定义的变量
echo %SystemDrive%           #显示系统盘盘符。系统变量可以直接引用
set p                        #显示所有以p开头的变量，要是一个也没有就设errorlevel:1
set p:aa1bb1aa2bb2           #设置变量p，并赋值为 : 后面的字符串，即aa1bb1aa2bb2
echo %p%                     #显示变量p代表的字符串，即aa1bb1aa2bb2
echo %p:~6%                  #显示变量p中第6个字符以后的所有字符，即aa2bb2
echo %p:~6,3%                #显示第6个字符以后的3个字符，即aa2
echo %p:~0,3%                #显示前3个字符，即aa1
echo %p:~-2%                 #显示最后面的2个字符，即b2
echo %p:~0,-2%               #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b
echo %p:aa:c%                #用c替换变量p中所有的aa，即显示c1bb1c2bb2
echo %p:aa=%                 #将变量p中的所有aa字符串置换为空，即显示1bb12bb2
echo %p:*bb:c%               #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2
set p=%p:*bb:c%              #设置变量p，赋值为 %p:*bb:c% ，即c1aa2bb2
set /a p:39                  #设置p为数值型变量，值为39
set /a p:39/10               #支持运算符，有小数时用去尾法，39/10:3.9，去尾得3，p:3
set /a p:p/10                #用 /a 参数时，在 : 后面的变量可以不加%直接引用
set /a p=”1&0″               #”与”运算，要加引号。其它支持的运算符参见set/?
set p:                       #取消p变量
set /p p:请输入
屏幕上显示”请输入”，并会将输入的字符串赋值给变量p
注意这条可以用来取代 choice 命令
注意变量在 if 和 for 的复合语句里是一次性全部替换的，如
@echo off
set p:aaa
if %p%==aaa (
          echo %p%
          set p:bbb
          echo %p%
          )
结果将显示
aaa
aaa
因为在读取 if 语句时已经将所有 %p% 替换为aaa
这里的\"替换\"，在 /? 帮助里就是指\"扩充\"、\"环境变量扩充\"
可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!
@echo off
SETLOCAL ENABLEDELAYEDEXPANSION
set p:aaa
if %p%==aaa (
          echo %p%
          set p:bbb
          echo !p!
          )
ENDLOCAL
结果将显示
aaa
bbb
还有几个动态变量，运行 set 看不到
%CD%                        #代表当前目录的字符串
%DATE%                      #当前日期
%TIME%                      #当前时间
%RANDOM%                    #随机整数，介于0~32767
%ERRORLEVEL%                #当前 ERRORLEVEL 值
%CMDEXTVERSION%             #当前命令处理器扩展名版本号
%CMDCMDLINE%                #调用命令处理器的原始命令行
可以用echo命令查看每个变量值，如 echo %time%
注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到
32 start
批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令
33 call
批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行
有时有的应用程序用start调用出错的，也可以call调用
34 choice (外部命令)
选择命令
让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……
win98里是choice.com
win2000pro里没有，可以从win98里拷过来
win2003里是choice.exe
choice /N /C y /T 5 /D y>nul
延时5秒
35 assoc 和 ftype
文件关联
assoc 设置'文件扩展名'关联，关联到'文件类型'
ftype 设置'文件类型'关联，关联到'执行程序和参数'
当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开
而是先判断.txt属于 txtfile '文件类型'
再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1
可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联
assoc                 #显示所有'文件扩展名'关联
assoc .txt            #显示.txt代表的'文件类型'，结果显示 .txt:txtfile
assoc .doc            #显示.doc代表的'文件类型'，结果显示 .doc:Word.Document.8
assoc .exe            #显示.exe代表的'文件类型'，结果显示 .exe:exefile
ftype                 #显示所有'文件类型'关联
ftype exefile         #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*
assoc .txt:Word.Document.8
设置.txt为word类型的文档，可以看到.txt文件的图标都变了
assoc .txt:txtfile
恢复.txt的正确关联
ftype exefile=\"%1\" %*
恢复 exefile 的正确关联
如果该关联已经被破坏，可以运行 command.com ，再输入这条命令
36 pushd 和 popd
切换当前目录
@echo off
c: & cd\ & md mp3             #在 C:\ 建立 mp3 文件夹
md d:\mp4                     #在 D:\ 建立 mp4 文件夹
cd /d d:\mp4                  #更改当前目录为 d:\mp4
pushd c:\mp3                  #保存当前目录，并切换当前目录为 c:\mp3
popd                          #恢复当前目录为刚才保存的 d:\mp4
37 for
循环命令
这个比较复杂，请对照 for/? 来看
for %%i in (c: d: e: f:) do echo %%i
依次调用小括号里的每个字符串，执行 do 后面的命令
注意%%i，在批处理中 for 语句调用参数用2个%
默认的字符串分隔符是\"空格键\"，\"Tab键\"，\"回车键\"
for %%i in (*.txt) do find \"abc\" %%i
对当前目录里所有的txt文件执行 find 命令
for /r . %%i in (*.txt) do find \"abc\" %%i
在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行
for /r . %%i in (.) do echo %%~pni
显示当前目录名和所有子目录名，包括路径，不包括盘符
for /r d:\mp3 %%i in (*.mp3) do echo %%i>>d:\mp3.txt
把 d:\mp3 及其子目录里的mp3文件的文件名都存到 d:\mp3.txt 里去
for /l %%i in (2,1,8) do echo %%i
生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1
for /f %%i in ('set') do echo %%i
对 set 命令的输出结果循环调用，每行一个
for /f \"eol:P\" %%i in ('set') do echo %%i
取 set 命令的输出结果，忽略以 P 开头的那几行
for /f %%i in (d:\mp3.txt) do echo %%i
显示 d:\mp3.txt 里的每个文件名，每行一个，不支持带空格的名称
for /f \"delims=\" %%i in (d:\mp3.txt) do echo %%i
显示 d:\mp3.txt 里的每个文件名，每行一个，支持带空格的名称
for /f \"skip:5 tokens:4\" %%a in ('dir') do echo %%a
对 dir 命令的结果，跳过前面5行，余下的每行取第4列
每列之间的分隔符为默认的\"空格\"
可以注意到 dir 命令输出的前5行是没有文件名的
for /f \"tokens:1,2,3 delims=- \" %%a in ('date /t') do (
          echo %%a
          echo %%b
          echo %%c
          )
对 date /t 的输出结果，每行取1、2、3列
第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列
分隔符指定为 - 和\"空格\"，注意 delims=- 后面有个\"空格\"
其中 tokens:1,2,3 若用 tokens:1-3 替换，效果是一样的
for /f \"tokens:2* delims=- \" %%a in ('date /t') do echo %%b
取第2列给 %%a ，其后的列都给 %%b
32 subst (外部命令)
映射磁盘。
subst z: \server\d           #这样输入z:就可以访问\server\d了
subst z: /d                   #取消该映射
subst                         #显示目前所有的映时
38        xcopy (外部命令)
文件拷贝
xcopy d:\mp3 e:\mp3 /s/e/i/y复制 d:\mp3 文件夹、所有子文件夹和文件到 e:\ ，覆盖已有文件加 /i 表示如果 e:\ 没有 mp3 文件夹就自动新建一个，否则会有询问

-------------------------------------------------------------------------------------------------------------------------------










