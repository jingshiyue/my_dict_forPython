http://www.liujiangblog.com/course/django/89

django-admin startproject mysite
python manage.py runserver     127.0.0.1:8000
python manage.py startapp polls

from django.http import HttpResponse
from django.urls import path,include

python manage.py migrate
    migrate命令将遍历INSTALLED_APPS设置中的所有项目，在数据库中创建对应的表，并打印出每一条动作信息。如果你感兴趣，可以在你的数据库命令行下输入：\dt (PostgreSQL)、 SHOW TABLES;(MySQL)或 .schema(SQLite) 来列出 Django 所创建的表。
    提示：对于极简主义者，你完全可以在INSTALLED_APPS内注释掉任何或者全部的Django提供的通用应用。这样，migrate也不会再创建对应的数据表。

python manage.py makemigrations polls     产生migrants文件，为改动创建迁移记录
python manage.py sqlmigrate polls 0001    查看转换的sql语句
python manage.py migrate  将操作同步到数据库 之所以要将创建和实施迁移的动作分成两个命令两步走是因为你也许要通过版本控制系统（例如github，svn）提交你的项目代码，如果没有一个中间过程的保存文件（migrations），那么github如何知道以及记录、同步、实施你所进行过的模型修改动作呢？毕竟，github不和数据库直接打交道，也没法和你本地的数据库通信。但是分开之后，你只需要将你的migration文件（例如上面的0001）上传到github，它就会知道一切
python manage.py shell            
    
python manage.py createsuperuser    
    
在使用非SQLite的数据库时，请务必预先在数据库管理系统的提示符交互模式下创建数据库，你可以使用命令：CREATE DATABASE database_name;。Django不会自动帮你做这一步工作。

TIME_ZONE = 'Asia/Shanghai'

在使用非SQLite的数据库时，请务必预先在数据库管理系统的提示符交互模式下创建数据库，你可以使用命令：CREATE DATABASE database_name;。Django不会自动帮你做这一步工作。

setting.py中配置mysql数据库：
    import pymysql         # 一定要添加这两行！通过pip install pymysql！
    pymysql.install_as_MySQLdb()

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'mysite',
            'HOST': '192.168.1.1',
            'USER': 'root',
            'PASSWORD': 'pwd',
            'PORT': '3306',
        }
    }
        
INSTALLED_APPS = [
    'polls.apps.PollsConfig',  #自己加的app，注意加逗号隔开
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]        
        
        
        
        
        
        
主url：
    urlpatterns = [
        path('admin/', admin.site.urls),
        path('polls/',include('polls.urls'))#include里要加引号！！！！！
]
app url：
    urlpatterns = [
    path('', views.index, name='index'),
]

path()方法：
    路由系统中最重要的path()方法可以接收4个参数，其中2个是必须的：route和view，以及2个可选的参数：kwargs和name。
    route：
    route 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 urlpatterns 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项，然后执行该条目映射的视图函数或下级路由，其后的条目将不再继续匹配。因此，url路由的编写顺序非常重要！
    需要注意的是，route不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 https://www.example.com/myapp/时，它会尝试匹配 myapp/。处理请求 https://www.example.com/myapp/?page=3 时，也只会尝试匹配 myapp/。

    view：
    view指的是处理当前url请求的视图函数。当Django匹配到某个路由条目时，自动将封装的HttpRequest对象作为第一个参数，被“捕获”的参数以关键字参数的形式，传递给该条目指定的视图view。

    kwargs：
    任意数量的关键字参数可以作为一个字典传递给目标视图。

    name：
    对你的URL进行命名，让你能够在Django的任意处，尤其是模板内显式地引用它。这是一个非常强大的功能，相当于给URL取了个全局变量名，不会将url匹配地址写死。
    
render()
    from django.shortcuts import render
    return render(request, 'polls/index.html', context)    render()函数的第一个位置参数是请求对象（就是view函数的第一个参数），第二个位置参数是模板。还可以有一个可选的第三参数，一个字典，包含需要传递给模板的数据。最后render函数返回一个经过字典数据渲染过的模板封装而成的HttpResponse对象
    
<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li> #可在模板中嵌套使用 detail是url的name，question.id是detail函数里的一个参数。
    反向寻址
    Django会在polls.urls文件中查找name='detail'的url，具体的就是下面这行：
    path('<int:question_id>/', views.detail, name='detail'),
    
URL names的命名空间:
    app_name = 'polls'  #在polls/urls.py文件的开头部分
    <li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>  #模板

    
管理员注册：
    打开polls/admin.py文件，加入下面的内容：

    from django.contrib import admin
    from .models import Question

    admin.site.register(Question)